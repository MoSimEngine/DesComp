public class edu.kit.ipd.sdq.eventsim.measurement.r.window.TransformToEquidistantObservations extends java.lang.Object
{
    private double windowSize;
    private edu.kit.ipd.sdq.eventsim.measurement.r.RContext context;

    public void <init>(edu.kit.ipd.sdq.eventsim.measurement.r.RContext, double)
    {
        edu.kit.ipd.sdq.eventsim.measurement.r.window.TransformToEquidistantObservations r0;
        edu.kit.ipd.sdq.eventsim.measurement.r.RContext r1;
        double d0;

        r0 := @this: edu.kit.ipd.sdq.eventsim.measurement.r.window.TransformToEquidistantObservations;

        r1 := @parameter0: edu.kit.ipd.sdq.eventsim.measurement.r.RContext;

        d0 := @parameter1: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<edu.kit.ipd.sdq.eventsim.measurement.r.window.TransformToEquidistantObservations: edu.kit.ipd.sdq.eventsim.measurement.r.RContext context> = r1;

        r0.<edu.kit.ipd.sdq.eventsim.measurement.r.window.TransformToEquidistantObservations: double windowSize> = d0;

        return;
    }

    public transient void calculateDerivedMetric(java.lang.String, java.lang.String, edu.kit.ipd.sdq.eventsim.measurement.r.window.WindowCalculator, java.lang.String[]) throws edu.kit.ipd.sdq.eventsim.measurement.r.jobs.EvaluationException, org.rosuda.REngine.REXPMismatchException, org.rosuda.REngine.Rserve.RserveException
    {
        edu.kit.ipd.sdq.eventsim.measurement.r.window.TransformToEquidistantObservations r0;
        java.lang.String r1, r2, r13, $r22, $r27, $r29, $r31, $r34, $r36, $r37, $r40, $r43, $r49, $r65, $r77, $r81, $r85, r93, r94;
        edu.kit.ipd.sdq.eventsim.measurement.r.window.WindowCalculator r3;
        java.lang.String[] r4, r6, $r16, $r28, $r39, $r55, $r64, $r66, $r73, $r84;
        java.lang.String[][] r5;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, i8, i9, i10;
        org.rosuda.REngine.REXP r7, $r50, $r51, $r70;
        org.rosuda.REngine.RList r8, $r53;
        double[] r9, $r52, $r58, $r61;
        int[] r10;
        double[][] r11;
        edu.kit.ipd.sdq.eventsim.measurement.r.RContext $r14, $r17, $r44, $r68, $r71, $r90;
        org.rosuda.REngine.Rserve.RConnection $r15, $r18, $r45, $r69, $r72, $r91;
        java.lang.StringBuilder $r19, $r20, $r21, $r24, $r25, $r26, $r30, $r32, $r33, $r35, $r38, $r41, $r42, $r46, $r47, $r48, $r74, $r75, $r76, $r78, $r79, $r80, $r82, $r83, $r86, $r87, $r88, $r89;
        double $d0;
        org.rosuda.REngine.REXPString $r54, $r63;
        org.rosuda.REngine.REXPDouble $r57, $r60;

        r0 := @this: edu.kit.ipd.sdq.eventsim.measurement.r.window.TransformToEquidistantObservations;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: edu.kit.ipd.sdq.eventsim.measurement.r.window.WindowCalculator;

        r4 := @parameter3: java.lang.String[];

        $r14 = r0.<edu.kit.ipd.sdq.eventsim.measurement.r.window.TransformToEquidistantObservations: edu.kit.ipd.sdq.eventsim.measurement.r.RContext context>;

        $r15 = virtualinvoke $r14.<edu.kit.ipd.sdq.eventsim.measurement.r.RContext: org.rosuda.REngine.Rserve.RConnection getConnection()>();

        r5 = specialinvoke r0.<edu.kit.ipd.sdq.eventsim.measurement.r.window.TransformToEquidistantObservations: java.lang.String[][] uniqueRows(org.rosuda.REngine.Rserve.RConnection,java.lang.String,java.lang.String[])>($r15, r1, r4);

        $r16 = r5[0];

        i0 = lengthof $r16;

        i1 = lengthof r4;

        $r17 = r0.<edu.kit.ipd.sdq.eventsim.measurement.r.window.TransformToEquidistantObservations: edu.kit.ipd.sdq.eventsim.measurement.r.RContext context>;

        $r18 = virtualinvoke $r17.<edu.kit.ipd.sdq.eventsim.measurement.r.RContext: org.rosuda.REngine.Rserve.RConnection getConnection()>();

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>(java.lang.String)>("result <- vector(\'list\', ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <edu.kit.ipd.sdq.eventsim.measurement.r.jobs.EvaluationHelper: org.rosuda.REngine.REXP evaluate(org.rosuda.REngine.Rserve.RConnection,java.lang.String)>($r18, $r22);

        i8 = 0;

        goto label8;

     label1:
        $i3 = i1 + 1;

        r6 = newarray (java.lang.String)[$i3];

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>(java.lang.String)>("what==\'");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        r6[0] = $r27;

        i9 = 0;

        goto label5;

     label2:
        $r28 = r5[i9];

        $r29 = $r28[i8];

        if $r29 == null goto label3;

        $i5 = i9 + 1;

        $r35 = new java.lang.StringBuilder;

        $r36 = r4[i9];

        $r37 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r36);

        specialinvoke $r35.<java.lang.StringBuilder: void <init>(java.lang.String)>($r37);

        $r38 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("==\'");

        $r39 = r5[i9];

        $r40 = $r39[i8];

        $r41 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r40);

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        r6[$i5] = $r43;

        goto label4;

     label3:
        $i4 = i9 + 1;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>(java.lang.String)>("is.na(");

        $r31 = r4[i9];

        $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        r6[$i4] = $r34;

     label4:
        i9 = i9 + 1;

     label5:
        if i9 < i1 goto label2;

        r93 = staticinvoke <java.lang.String: java.lang.String join(java.lang.CharSequence,java.lang.CharSequence[])>(" & ", r6);

        $r44 = r0.<edu.kit.ipd.sdq.eventsim.measurement.r.window.TransformToEquidistantObservations: edu.kit.ipd.sdq.eventsim.measurement.r.RContext context>;

        $r45 = virtualinvoke $r44.<edu.kit.ipd.sdq.eventsim.measurement.r.RContext: org.rosuda.REngine.Rserve.RConnection getConnection()>();

        $r46 = new java.lang.StringBuilder;

        specialinvoke $r46.<java.lang.StringBuilder: void <init>(java.lang.String)>("mm[");

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r93);

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", .(when, value)][order(when)]");

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.String toString()>();

        r7 = staticinvoke <edu.kit.ipd.sdq.eventsim.measurement.r.jobs.EvaluationHelper: org.rosuda.REngine.REXP evaluate(org.rosuda.REngine.Rserve.RConnection,java.lang.String)>($r45, $r49);

        r8 = virtualinvoke r7.<org.rosuda.REngine.REXP: org.rosuda.REngine.RList asList()>();

        $r50 = virtualinvoke r8.<org.rosuda.REngine.RList: org.rosuda.REngine.REXP at(java.lang.String)>("when");

        r9 = virtualinvoke $r50.<org.rosuda.REngine.REXP: double[] asDoubles()>();

        $r51 = virtualinvoke r8.<org.rosuda.REngine.RList: org.rosuda.REngine.REXP at(java.lang.String)>("value");

        r10 = virtualinvoke $r51.<org.rosuda.REngine.REXP: int[] asIntegers()>();

        $d0 = r0.<edu.kit.ipd.sdq.eventsim.measurement.r.window.TransformToEquidistantObservations: double windowSize>;

        r11 = specialinvoke r0.<edu.kit.ipd.sdq.eventsim.measurement.r.window.TransformToEquidistantObservations: double[][] calculateDerivedMetricForGroup(double[],int[],double,edu.kit.ipd.sdq.eventsim.measurement.r.window.WindowCalculator)>(r9, r10, $d0, r3);

        $r52 = r11[0];

        i2 = lengthof $r52;

        $r53 = new org.rosuda.REngine.RList;

        $i6 = 3 + i1;

        specialinvoke $r53.<org.rosuda.REngine.RList: void <init>(int,boolean)>($i6, 1);

        $r54 = new org.rosuda.REngine.REXPString;

        $r55 = specialinvoke r0.<edu.kit.ipd.sdq.eventsim.measurement.r.window.TransformToEquidistantObservations: java.lang.String[] replicate(java.lang.String,int)>(r2, i2);

        specialinvoke $r54.<org.rosuda.REngine.REXPString: void <init>(java.lang.String[])>($r55);

        virtualinvoke $r53.<org.rosuda.REngine.RList: java.lang.Object put(java.lang.Object,java.lang.Object)>("what", $r54);

        $r57 = new org.rosuda.REngine.REXPDouble;

        $r58 = r11[0];

        specialinvoke $r57.<org.rosuda.REngine.REXPDouble: void <init>(double[])>($r58);

        virtualinvoke $r53.<org.rosuda.REngine.RList: java.lang.Object put(java.lang.Object,java.lang.Object)>("when", $r57);

        $r60 = new org.rosuda.REngine.REXPDouble;

        $r61 = r11[1];

        specialinvoke $r60.<org.rosuda.REngine.REXPDouble: void <init>(double[])>($r61);

        virtualinvoke $r53.<org.rosuda.REngine.RList: java.lang.Object put(java.lang.Object,java.lang.Object)>("value", $r60);

        i10 = 0;

        goto label7;

     label6:
        r13 = r4[i10];

        $r63 = new org.rosuda.REngine.REXPString;

        $r64 = r5[i10];

        $r65 = $r64[i8];

        $r66 = specialinvoke r0.<edu.kit.ipd.sdq.eventsim.measurement.r.window.TransformToEquidistantObservations: java.lang.String[] replicate(java.lang.String,int)>($r65, i2);

        specialinvoke $r63.<org.rosuda.REngine.REXPString: void <init>(java.lang.String[])>($r66);

        virtualinvoke $r53.<org.rosuda.REngine.RList: java.lang.Object put(java.lang.Object,java.lang.Object)>(r13, $r63);

        i10 = i10 + 1;

     label7:
        if i10 < i1 goto label6;

        $r68 = r0.<edu.kit.ipd.sdq.eventsim.measurement.r.window.TransformToEquidistantObservations: edu.kit.ipd.sdq.eventsim.measurement.r.RContext context>;

        $r69 = virtualinvoke $r68.<edu.kit.ipd.sdq.eventsim.measurement.r.RContext: org.rosuda.REngine.Rserve.RConnection getConnection()>();

        $r70 = staticinvoke <org.rosuda.REngine.REXP: org.rosuda.REngine.REXP createDataFrame(org.rosuda.REngine.RList)>($r53);

        virtualinvoke $r69.<org.rosuda.REngine.Rserve.RConnection: void assign(java.lang.String,org.rosuda.REngine.REXP)>("tmp", $r70);

        $r71 = r0.<edu.kit.ipd.sdq.eventsim.measurement.r.window.TransformToEquidistantObservations: edu.kit.ipd.sdq.eventsim.measurement.r.RContext context>;

        $r72 = virtualinvoke $r71.<edu.kit.ipd.sdq.eventsim.measurement.r.RContext: org.rosuda.REngine.Rserve.RConnection getConnection()>();

        $r73 = newarray (java.lang.String)[1];

        $r74 = new java.lang.StringBuilder;

        specialinvoke $r74.<java.lang.StringBuilder: void <init>(java.lang.String)>("result[[");

        $i7 = i8 + 1;

        $r75 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r76 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]] <- tmp");

        $r77 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.String toString()>();

        $r73[0] = $r77;

        staticinvoke <edu.kit.ipd.sdq.eventsim.measurement.r.jobs.EvaluationHelper: void evaluateVoid(org.rosuda.REngine.Rserve.RConnection,java.lang.String[])>($r72, $r73);

        i8 = i8 + 1;

     label8:
        if i8 < i0 goto label1;

        $r78 = new java.lang.StringBuilder;

        specialinvoke $r78.<java.lang.StringBuilder: void <init>(java.lang.String)>("result <- rbindlist(result, fill=TRUE);result <- merge(result, mm[what==\'");

        $r79 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r80 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\', .SD[1], by=.(");

        $r81 = staticinvoke <java.lang.String: java.lang.String join(java.lang.CharSequence,java.lang.CharSequence[])>(",", r4);

        $r82 = virtualinvoke $r80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r81);

        $r83 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")][,c(\'when\', \'value\', \'what\', \'where.property\') := NULL], by=c(");

        $r84 = specialinvoke r0.<edu.kit.ipd.sdq.eventsim.measurement.r.window.TransformToEquidistantObservations: java.lang.String[] quote(java.lang.String[])>(r4);

        $r85 = staticinvoke <java.lang.String: java.lang.String join(java.lang.CharSequence,java.lang.CharSequence[])>(",", $r84);

        $r86 = virtualinvoke $r83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r85);

        $r87 = virtualinvoke $r86.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("));");

        $r88 = virtualinvoke $r87.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mm <- rbindlist(list(mm, result), fill=TRUE);");

        $r89 = virtualinvoke $r88.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("rm(tmp); rm(result)");

        r94 = virtualinvoke $r89.<java.lang.StringBuilder: java.lang.String toString()>();

        $r90 = r0.<edu.kit.ipd.sdq.eventsim.measurement.r.window.TransformToEquidistantObservations: edu.kit.ipd.sdq.eventsim.measurement.r.RContext context>;

        $r91 = virtualinvoke $r90.<edu.kit.ipd.sdq.eventsim.measurement.r.RContext: org.rosuda.REngine.Rserve.RConnection getConnection()>();

        staticinvoke <edu.kit.ipd.sdq.eventsim.measurement.r.jobs.EvaluationHelper: org.rosuda.REngine.REXP evaluate(org.rosuda.REngine.Rserve.RConnection,java.lang.String)>($r91, r94);

        return;
    }

    private java.lang.String[][] uniqueRows(org.rosuda.REngine.Rserve.RConnection, java.lang.String, java.lang.String[]) throws edu.kit.ipd.sdq.eventsim.measurement.r.jobs.EvaluationException, org.rosuda.REngine.REXPMismatchException
    {
        edu.kit.ipd.sdq.eventsim.measurement.r.window.TransformToEquidistantObservations r0;
        org.rosuda.REngine.Rserve.RConnection r1;
        java.lang.String r2, r7, $r11, $r14;
        java.lang.String[] r3, $r16;
        org.rosuda.REngine.REXP r4, $r15;
        org.rosuda.REngine.RList r5;
        java.lang.String[][] r6;
        java.lang.StringBuilder $r8, $r9, $r10, $r12, $r13;
        int $i0, $i1, i2;

        r0 := @this: edu.kit.ipd.sdq.eventsim.measurement.r.window.TransformToEquidistantObservations;

        r1 := @parameter0: org.rosuda.REngine.Rserve.RConnection;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String[];

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("unique(mm[what==\'");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\', .(");

        $r11 = staticinvoke <java.lang.String: java.lang.String join(java.lang.CharSequence,java.lang.CharSequence[])>(",", r3);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")])");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        r4 = staticinvoke <edu.kit.ipd.sdq.eventsim.measurement.r.jobs.EvaluationHelper: org.rosuda.REngine.REXP evaluate(org.rosuda.REngine.Rserve.RConnection,java.lang.String)>(r1, $r14);

        r5 = virtualinvoke r4.<org.rosuda.REngine.REXP: org.rosuda.REngine.RList asList()>();

        $i0 = virtualinvoke r5.<org.rosuda.REngine.RList: int size()>();

        r6 = newarray (java.lang.String[])[$i0];

        i2 = 0;

        goto label2;

     label1:
        r7 = r3[i2];

        $r15 = virtualinvoke r5.<org.rosuda.REngine.RList: org.rosuda.REngine.REXP at(java.lang.String)>(r7);

        $r16 = virtualinvoke $r15.<org.rosuda.REngine.REXP: java.lang.String[] asStrings()>();

        r6[i2] = $r16;

        i2 = i2 + 1;

     label2:
        $i1 = virtualinvoke r5.<org.rosuda.REngine.RList: int size()>();

        if i2 < $i1 goto label1;

        return r6;
    }

    private java.lang.String[] quote(java.lang.String[])
    {
        edu.kit.ipd.sdq.eventsim.measurement.r.window.TransformToEquidistantObservations r0;
        java.lang.String[] r1, r2;
        int $i0, $i1, i2;
        java.lang.StringBuilder $r3, $r5, $r6;
        java.lang.String $r4, $r7;

        r0 := @this: edu.kit.ipd.sdq.eventsim.measurement.r.window.TransformToEquidistantObservations;

        r1 := @parameter0: java.lang.String[];

        $i0 = lengthof r1;

        r2 = newarray (java.lang.String)[$i0];

        i2 = 0;

        goto label2;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("\'");

        $r4 = r1[i2];

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        r2[i2] = $r7;

        i2 = i2 + 1;

     label2:
        $i1 = lengthof r1;

        if i2 < $i1 goto label1;

        return r2;
    }

    private java.lang.String[] replicate(java.lang.String, int)
    {
        edu.kit.ipd.sdq.eventsim.measurement.r.window.TransformToEquidistantObservations r0;
        java.lang.String r1;
        int i0, i1;
        java.lang.String[] r2;

        r0 := @this: edu.kit.ipd.sdq.eventsim.measurement.r.window.TransformToEquidistantObservations;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 = newarray (java.lang.String)[i0];

        i1 = 0;

        goto label2;

     label1:
        r2[i1] = r1;

        i1 = i1 + 1;

     label2:
        if i1 < i0 goto label1;

        return r2;
    }

    private double[][] calculateDerivedMetricForGroup(double[], int[], double, edu.kit.ipd.sdq.eventsim.measurement.r.window.WindowCalculator)
    {
        edu.kit.ipd.sdq.eventsim.measurement.r.window.TransformToEquidistantObservations r0;
        double[] r1, r4, r7;
        int[] r2;
        double d0, d1, d2, d3, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, d22, d23;
        edu.kit.ipd.sdq.eventsim.measurement.r.window.WindowCalculator r3;
        int i0, $i1, $i2, $i3, $i4, $i5, $i7, $i9, $i11, $i12, i13, i14, i15;
        byte $b6, $b8, $b10;
        java.lang.RuntimeException $r5;
        double[][] $r6;

        r0 := @this: edu.kit.ipd.sdq.eventsim.measurement.r.window.TransformToEquidistantObservations;

        r1 := @parameter0: double[];

        r2 := @parameter1: int[];

        d0 := @parameter2: double;

        r3 := @parameter3: edu.kit.ipd.sdq.eventsim.measurement.r.window.WindowCalculator;

        $i1 = lengthof r1;

        $i2 = $i1 - 1;

        d1 = r1[$i2];

        $d5 = d1 / d0;

        $d6 = staticinvoke <java.lang.Math: double ceil(double)>($d5);

        i0 = (int) $d6;

        r4 = newarray (double)[i0];

        d22 = 0.0;

        i13 = 0;

        i14 = 0;

        goto label6;

     label1:
        $d8 = r1[i14];

        $i5 = i14 + 1;

        $d7 = r1[$i5];

        $b6 = $d8 cmpl $d7;

        if $b6 <= 0 goto label2;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>("Simulation times in measurements needs to be monotonically increasing.");

        throw $r5;

     label2:
        $i7 = i14 + 1;

        $d10 = r1[$i7];

        $d9 = r1[i14];

        d2 = $d10 - $d9;

        d23 = d2;

     label3:
        $d11 = d22 + d23;

        $b8 = $d11 cmpl d0;

        if $b8 < 0 goto label4;

        d3 = d0 - d22;

        d23 = d23 - d3;

        $d17 = r4[i13];

        $i11 = r2[i14];

        $d16 = (double) $i11;

        $d18 = interfaceinvoke r3.<edu.kit.ipd.sdq.eventsim.measurement.r.window.WindowCalculator: double processValue(double,double)>($d16, d3);

        $d19 = $d17 + $d18;

        r4[i13] = $d19;

        i13 = i13 + 1;

        d22 = 0.0;

        goto label5;

     label4:
        $d13 = r4[i13];

        $i9 = r2[i14];

        $d12 = (double) $i9;

        $d14 = interfaceinvoke r3.<edu.kit.ipd.sdq.eventsim.measurement.r.window.WindowCalculator: double processValue(double,double)>($d12, d23);

        $d15 = $d13 + $d14;

        r4[i13] = $d15;

        d22 = d22 + d23;

        d23 = 0.0;

     label5:
        $b10 = d23 cmpl 0.0;

        if $b10 > 0 goto label3;

        i14 = i14 + 1;

     label6:
        $i3 = lengthof r1;

        $i4 = $i3 - 1;

        if i14 < $i4 goto label1;

        r7 = newarray (double)[i0];

        i15 = 0;

        goto label8;

     label7:
        $i12 = i15 + 1;

        $d20 = (double) $i12;

        $d21 = $d20 * d0;

        r7[i15] = $d21;

        i15 = i15 + 1;

     label8:
        if i15 < i0 goto label7;

        $r6 = newarray (double[])[2];

        $r6[0] = r7;

        $r6[1] = r4;

        return $r6;
    }
}
