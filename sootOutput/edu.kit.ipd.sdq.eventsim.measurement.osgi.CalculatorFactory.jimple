public class edu.kit.ipd.sdq.eventsim.measurement.osgi.CalculatorFactory extends java.lang.Object
{
    private static final org.apache.log4j.Logger log;
    private java.util.Map calculatorsMap;

    static void <clinit>()
    {
        org.apache.log4j.Logger $r0;

        $r0 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getLogger(java.lang.Class)>(class "Ledu/kit/ipd/sdq/eventsim/measurement/osgi/CalculatorFactory;");

        <edu.kit.ipd.sdq.eventsim.measurement.osgi.CalculatorFactory: org.apache.log4j.Logger log> = $r0;

        return;
    }

    public void <init>(org.osgi.framework.Bundle)
    {
        edu.kit.ipd.sdq.eventsim.measurement.osgi.CalculatorFactory r0;
        org.osgi.framework.Bundle r1;
        java.util.HashMap $r2;
        edu.kit.ipd.sdq.eventsim.instrumentation.utils.ClassSelector $r3;
        java.util.List $r4;
        java.util.stream.Stream $r5, $r7;
        java.util.function.Function $r6;
        java.util.function.Consumer $r8;

        r0 := @this: edu.kit.ipd.sdq.eventsim.measurement.osgi.CalculatorFactory;

        r1 := @parameter0: org.osgi.framework.Bundle;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<edu.kit.ipd.sdq.eventsim.measurement.osgi.CalculatorFactory: java.util.Map calculatorsMap> = $r2;

        $r3 = staticinvoke <edu.kit.ipd.sdq.eventsim.measurement.osgi.CalculatorFactory$isCalculatorType__139: edu.kit.ipd.sdq.eventsim.instrumentation.utils.ClassSelector bootstrap$(edu.kit.ipd.sdq.eventsim.measurement.osgi.CalculatorFactory)>(r0);

        $r4 = staticinvoke <edu.kit.ipd.sdq.eventsim.instrumentation.utils.ClassRepository: java.util.List filterClassesInBundle(org.osgi.framework.Bundle,edu.kit.ipd.sdq.eventsim.instrumentation.utils.ClassSelector)>(r1, $r3);

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.stream.Stream stream()>();

        $r6 = staticinvoke <edu.kit.ipd.sdq.eventsim.measurement.osgi.CalculatorFactory$lambda_1__140: java.util.function.Function bootstrap$()>();

        $r7 = interfaceinvoke $r5.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r6);

        $r8 = staticinvoke <edu.kit.ipd.sdq.eventsim.measurement.osgi.CalculatorFactory$lambda_2__141: java.util.function.Consumer bootstrap$(edu.kit.ipd.sdq.eventsim.measurement.osgi.CalculatorFactory)>(r0);

        interfaceinvoke $r7.<java.util.stream.Stream: void forEach(java.util.function.Consumer)>($r8);

        return;
    }

    public boolean isCalculatorType(java.lang.Class)
    {
        edu.kit.ipd.sdq.eventsim.measurement.osgi.CalculatorFactory r0;
        java.lang.Class r1, $r3;
        edu.kit.ipd.sdq.eventsim.measurement.'annotation'.Calculator r2;
        boolean $z0;
        java.lang.'annotation'.Annotation $r4;

        r0 := @this: edu.kit.ipd.sdq.eventsim.measurement.osgi.CalculatorFactory;

        r1 := @parameter0: java.lang.Class;

        $r3 = class "Ledu/kit/ipd/sdq/eventsim/measurement/calculator/BinaryCalculator;";

        $z0 = virtualinvoke $r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r4 = virtualinvoke r1.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Ledu/kit/ipd/sdq/eventsim/measurement/annotation/Calculator;");

        r2 = (edu.kit.ipd.sdq.eventsim.measurement.'annotation'.Calculator) $r4;

        if r2 != null goto label2;

        return 0;

     label2:
        return 1;
    }

    private edu.kit.ipd.sdq.eventsim.measurement.osgi.CalculatorFactory$MeasuredTypesAndMetric createKeyFor(java.lang.Class)
    {
        edu.kit.ipd.sdq.eventsim.measurement.osgi.CalculatorFactory r0;
        java.lang.Class r1, $r4, $r5, $r7, $r8, $r11, $r12;
        edu.kit.ipd.sdq.eventsim.measurement.'annotation'.Calculator r2;
        java.lang.'annotation'.Annotation $r3;
        boolean $z0;
        edu.kit.ipd.sdq.eventsim.measurement.osgi.CalculatorFactory$MeasuredTypesAndMetric $r6, $r10;
        java.lang.String $r9, $r13;

        r0 := @this: edu.kit.ipd.sdq.eventsim.measurement.osgi.CalculatorFactory;

        r1 := @parameter0: java.lang.Class;

        $r3 = virtualinvoke r1.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Ledu/kit/ipd/sdq/eventsim/measurement/annotation/Calculator;");

        r2 = (edu.kit.ipd.sdq.eventsim.measurement.'annotation'.Calculator) $r3;

        $r4 = class "Ledu/kit/ipd/sdq/eventsim/measurement/Pair;";

        $r5 = interfaceinvoke r2.<edu.kit.ipd.sdq.eventsim.measurement.'annotation'.Calculator: java.lang.Class type()>();

        $z0 = virtualinvoke $r4.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r5);

        if $z0 == 0 goto label1;

        $r10 = new edu.kit.ipd.sdq.eventsim.measurement.osgi.CalculatorFactory$MeasuredTypesAndMetric;

        $r11 = interfaceinvoke r2.<edu.kit.ipd.sdq.eventsim.measurement.'annotation'.Calculator: java.lang.Class fromType()>();

        $r12 = interfaceinvoke r2.<edu.kit.ipd.sdq.eventsim.measurement.'annotation'.Calculator: java.lang.Class toType()>();

        $r13 = interfaceinvoke r2.<edu.kit.ipd.sdq.eventsim.measurement.'annotation'.Calculator: java.lang.String metric()>();

        specialinvoke $r10.<edu.kit.ipd.sdq.eventsim.measurement.osgi.CalculatorFactory$MeasuredTypesAndMetric: void <init>(edu.kit.ipd.sdq.eventsim.measurement.osgi.CalculatorFactory,java.lang.Class,java.lang.Class,java.lang.String)>(r0, $r11, $r12, $r13);

        return $r10;

     label1:
        $r6 = new edu.kit.ipd.sdq.eventsim.measurement.osgi.CalculatorFactory$MeasuredTypesAndMetric;

        $r7 = interfaceinvoke r2.<edu.kit.ipd.sdq.eventsim.measurement.'annotation'.Calculator: java.lang.Class type()>();

        $r8 = interfaceinvoke r2.<edu.kit.ipd.sdq.eventsim.measurement.'annotation'.Calculator: java.lang.Class type()>();

        $r9 = interfaceinvoke r2.<edu.kit.ipd.sdq.eventsim.measurement.'annotation'.Calculator: java.lang.String metric()>();

        specialinvoke $r6.<edu.kit.ipd.sdq.eventsim.measurement.osgi.CalculatorFactory$MeasuredTypesAndMetric: void <init>(edu.kit.ipd.sdq.eventsim.measurement.osgi.CalculatorFactory,java.lang.Class,java.lang.Class,java.lang.String)>(r0, $r7, $r8, $r9);

        return $r6;
    }

    public edu.kit.ipd.sdq.eventsim.measurement.calculator.BinaryCalculator create(java.lang.String, java.lang.Class, java.lang.Class)
    {
        edu.kit.ipd.sdq.eventsim.measurement.osgi.CalculatorFactory r0;
        java.lang.String r1, $r22, $r25;
        java.lang.Class r2, r3, r4, r37, r39;
        java.util.Iterator r5, r38;
        edu.kit.ipd.sdq.eventsim.measurement.osgi.CalculatorFactory$MeasuredTypesAndMetric $r6, $r31;
        java.util.Map $r7, $r32;
        java.lang.Object $r8, $r11, $r28, $r30, $r33;
        java.lang.Class[] $r9;
        java.lang.Object[] $r10, $r23;
        java.lang.StringBuilder $r12, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21;
        org.apache.log4j.Logger $r13, $r24, $r35;
        edu.kit.ipd.sdq.eventsim.measurement.calculator.BinaryCalculator $r26, $r36, r41;
        java.util.List $r27, $r29;
        boolean $z0, $z1;
        java.lang.Exception $r34;
        java.lang.reflect.Constructor r40;

        r0 := @this: edu.kit.ipd.sdq.eventsim.measurement.osgi.CalculatorFactory;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Class;

        r3 := @parameter2: java.lang.Class;

        $r7 = r0.<edu.kit.ipd.sdq.eventsim.measurement.osgi.CalculatorFactory: java.util.Map calculatorsMap>;

        $r6 = new edu.kit.ipd.sdq.eventsim.measurement.osgi.CalculatorFactory$MeasuredTypesAndMetric;

        specialinvoke $r6.<edu.kit.ipd.sdq.eventsim.measurement.osgi.CalculatorFactory$MeasuredTypesAndMetric: void <init>(edu.kit.ipd.sdq.eventsim.measurement.osgi.CalculatorFactory,java.lang.Class,java.lang.Class,java.lang.String)>(r0, r2, r3, r1);

        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>($r6);

        r37 = (java.lang.Class) $r8;

        if r37 != null goto label06;

        $r27 = specialinvoke r0.<edu.kit.ipd.sdq.eventsim.measurement.osgi.CalculatorFactory: java.util.List allSupertypes(java.lang.Class)>(r2);

        r38 = interfaceinvoke $r27.<java.util.List: java.util.Iterator iterator()>();

        goto label05;

     label01:
        $r28 = interfaceinvoke r38.<java.util.Iterator: java.lang.Object next()>();

        r39 = (java.lang.Class) $r28;

        $r29 = specialinvoke r0.<edu.kit.ipd.sdq.eventsim.measurement.osgi.CalculatorFactory: java.util.List allSupertypes(java.lang.Class)>(r3);

        r5 = interfaceinvoke $r29.<java.util.List: java.util.Iterator iterator()>();

        goto label03;

     label02:
        $r30 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.Class) $r30;

        $r32 = r0.<edu.kit.ipd.sdq.eventsim.measurement.osgi.CalculatorFactory: java.util.Map calculatorsMap>;

        $r31 = new edu.kit.ipd.sdq.eventsim.measurement.osgi.CalculatorFactory$MeasuredTypesAndMetric;

        specialinvoke $r31.<edu.kit.ipd.sdq.eventsim.measurement.osgi.CalculatorFactory$MeasuredTypesAndMetric: void <init>(edu.kit.ipd.sdq.eventsim.measurement.osgi.CalculatorFactory,java.lang.Class,java.lang.Class,java.lang.String)>(r0, r39, r4, r1);

        $r33 = interfaceinvoke $r32.<java.util.Map: java.lang.Object get(java.lang.Object)>($r31);

        r37 = (java.lang.Class) $r33;

        if r37 == null goto label03;

        goto label04;

     label03:
        $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label02;

     label04:
        if r37 == null goto label05;

        goto label06;

     label05:
        $z0 = interfaceinvoke r38.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label01;

     label06:
        if r37 != null goto label07;

        $r24 = <edu.kit.ipd.sdq.eventsim.measurement.osgi.CalculatorFactory: org.apache.log4j.Logger log>;

        $r23 = newarray (java.lang.Object)[3];

        $r23[0] = r1;

        $r23[1] = r2;

        $r23[2] = r3;

        $r25 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("No calculaotr has been found capable of measuring metric \"%s\" for elements of type %s and %s", $r23);

        virtualinvoke $r24.<org.apache.log4j.Logger: void error(java.lang.Object)>($r25);

        $r26 = specialinvoke r0.<edu.kit.ipd.sdq.eventsim.measurement.osgi.CalculatorFactory: edu.kit.ipd.sdq.eventsim.measurement.calculator.BinaryCalculator nullCalculator()>();

        return $r26;

     label07:
        $r9 = newarray (java.lang.Class)[0];

        r40 = virtualinvoke r37.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r9);

        $r10 = newarray (java.lang.Object)[0];

        $r11 = virtualinvoke r40.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r10);

        r41 = (edu.kit.ipd.sdq.eventsim.measurement.calculator.BinaryCalculator) $r11;

        $r13 = <edu.kit.ipd.sdq.eventsim.measurement.osgi.CalculatorFactory: org.apache.log4j.Logger log>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>("Created calculator ");

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r41);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (from=");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", to=");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", metric=");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r13.<org.apache.log4j.Logger: void debug(java.lang.Object)>($r22);

     label08:
        goto label10;

     label09:
        $r34 := @caughtexception;

        $r35 = <edu.kit.ipd.sdq.eventsim.measurement.osgi.CalculatorFactory: org.apache.log4j.Logger log>;

        virtualinvoke $r35.<org.apache.log4j.Logger: void error(java.lang.Object,java.lang.Throwable)>("Exception while invoking probe constructor.", $r34);

        $r36 = specialinvoke r0.<edu.kit.ipd.sdq.eventsim.measurement.osgi.CalculatorFactory: edu.kit.ipd.sdq.eventsim.measurement.calculator.BinaryCalculator nullCalculator()>();

        return $r36;

     label10:
        return r41;

        catch java.lang.NoSuchMethodException from label07 to label08 with label09;
        catch java.lang.SecurityException from label07 to label08 with label09;
        catch java.lang.InstantiationException from label07 to label08 with label09;
        catch java.lang.IllegalAccessException from label07 to label08 with label09;
        catch java.lang.IllegalArgumentException from label07 to label08 with label09;
        catch java.lang.reflect.InvocationTargetException from label07 to label08 with label09;
    }

    private edu.kit.ipd.sdq.eventsim.measurement.calculator.BinaryCalculator nullCalculator()
    {
        edu.kit.ipd.sdq.eventsim.measurement.osgi.CalculatorFactory r0;
        edu.kit.ipd.sdq.eventsim.measurement.osgi.CalculatorFactory$1 $r1;

        r0 := @this: edu.kit.ipd.sdq.eventsim.measurement.osgi.CalculatorFactory;

        $r1 = new edu.kit.ipd.sdq.eventsim.measurement.osgi.CalculatorFactory$1;

        specialinvoke $r1.<edu.kit.ipd.sdq.eventsim.measurement.osgi.CalculatorFactory$1: void <init>(edu.kit.ipd.sdq.eventsim.measurement.osgi.CalculatorFactory)>(r0);

        return $r1;
    }

    private java.util.List allSupertypes(java.lang.Class)
    {
        edu.kit.ipd.sdq.eventsim.measurement.osgi.CalculatorFactory r0;
        java.lang.Class r1, r4, $r13;
        java.util.Iterator r5;
        java.util.ArrayList $r7, $r9;
        java.lang.Class[] $r8, $r11;
        boolean $z0, $z4;
        java.lang.Object $r10;
        java.util.List $r12, r14;

        r0 := @this: edu.kit.ipd.sdq.eventsim.measurement.osgi.CalculatorFactory;

        r1 := @parameter0: java.lang.Class;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        $r8 = newarray (java.lang.Class)[1];

        $r8[0] = r1;

        r14 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r8);

        goto label4;

     label1:
        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        r5 = interfaceinvoke r14.<java.util.List: java.util.Iterator iterator()>();

        goto label3;

     label2:
        $r10 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.Class) $r10;

        $r11 = virtualinvoke r4.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        $r12 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r11);

        interfaceinvoke $r9.<java.util.List: boolean addAll(java.util.Collection)>($r12);

        $r13 = virtualinvoke r4.<java.lang.Class: java.lang.Class getSuperclass()>();

        if $r13 == null goto label3;

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r13);

     label3:
        $z4 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z4 != 0 goto label2;

        interfaceinvoke $r7.<java.util.List: boolean addAll(java.util.Collection)>($r9);

        r14 = $r9;

     label4:
        $z0 = interfaceinvoke r14.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return $r7;
    }

    public static java.lang.Class lambda$1(java.lang.Class)
    {
        java.lang.Class r0;

        r0 := @parameter0: java.lang.Class;

        return r0;
    }

    public void lambda$2(java.lang.Class)
    {
        edu.kit.ipd.sdq.eventsim.measurement.osgi.CalculatorFactory r0;
        java.lang.Class r1;
        java.util.Map $r2;
        edu.kit.ipd.sdq.eventsim.measurement.osgi.CalculatorFactory$MeasuredTypesAndMetric $r3;

        r0 := @this: edu.kit.ipd.sdq.eventsim.measurement.osgi.CalculatorFactory;

        r1 := @parameter0: java.lang.Class;

        $r2 = r0.<edu.kit.ipd.sdq.eventsim.measurement.osgi.CalculatorFactory: java.util.Map calculatorsMap>;

        $r3 = specialinvoke r0.<edu.kit.ipd.sdq.eventsim.measurement.osgi.CalculatorFactory: edu.kit.ipd.sdq.eventsim.measurement.osgi.CalculatorFactory$MeasuredTypesAndMetric createKeyFor(java.lang.Class)>(r1);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r1);

        return;
    }
}
