public class edu.kit.ipd.sdq.eventsim.measurement.PropertyExtractor extends java.lang.Object
{
    private static final org.apache.log4j.Logger log;
    private java.util.Map extractorMap;

    static void <clinit>()
    {
        org.apache.log4j.Logger $r0;

        $r0 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getLogger(java.lang.Class)>(class "Ledu/kit/ipd/sdq/eventsim/measurement/PropertyExtractor;");

        <edu.kit.ipd.sdq.eventsim.measurement.PropertyExtractor: org.apache.log4j.Logger log> = $r0;

        return;
    }

    public void <init>()
    {
        edu.kit.ipd.sdq.eventsim.measurement.PropertyExtractor r0;
        java.util.HashMap $r1;

        r0 := @this: edu.kit.ipd.sdq.eventsim.measurement.PropertyExtractor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<edu.kit.ipd.sdq.eventsim.measurement.PropertyExtractor: java.util.Map extractorMap> = $r1;

        return;
    }

    public void add(java.lang.Class, java.util.function.Function)
    {
        edu.kit.ipd.sdq.eventsim.measurement.PropertyExtractor r0;
        java.lang.Class r1;
        java.util.function.Function r2;
        java.util.Map $r3;

        r0 := @this: edu.kit.ipd.sdq.eventsim.measurement.PropertyExtractor;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.util.function.Function;

        $r3 = r0.<edu.kit.ipd.sdq.eventsim.measurement.PropertyExtractor: java.util.Map extractorMap>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    public boolean contains(java.lang.Class)
    {
        edu.kit.ipd.sdq.eventsim.measurement.PropertyExtractor r0;
        java.lang.Class r1;
        java.util.Map $r2;
        boolean $z0;

        r0 := @this: edu.kit.ipd.sdq.eventsim.measurement.PropertyExtractor;

        r1 := @parameter0: java.lang.Class;

        $r2 = r0.<edu.kit.ipd.sdq.eventsim.measurement.PropertyExtractor: java.util.Map extractorMap>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public java.util.function.Function get(java.lang.Class)
    {
        edu.kit.ipd.sdq.eventsim.measurement.PropertyExtractor r0;
        java.lang.Class r1;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.util.function.Function $r4;

        r0 := @this: edu.kit.ipd.sdq.eventsim.measurement.PropertyExtractor;

        r1 := @parameter0: java.lang.Class;

        $r2 = r0.<edu.kit.ipd.sdq.eventsim.measurement.PropertyExtractor: java.util.Map extractorMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (java.util.function.Function) $r3;

        return $r4;
    }

    private java.util.function.Function extractorForType(java.lang.Class)
    {
        edu.kit.ipd.sdq.eventsim.measurement.PropertyExtractor r0;
        java.lang.Class r1, r2, $r6;
        int i0, i1;
        java.util.function.Function r4, $r7, $r8;
        boolean $z0;
        java.lang.Class[] $r5;

        r0 := @this: edu.kit.ipd.sdq.eventsim.measurement.PropertyExtractor;

        r1 := @parameter0: java.lang.Class;

        if r1 != null goto label1;

        return null;

     label1:
        $z0 = virtualinvoke r0.<edu.kit.ipd.sdq.eventsim.measurement.PropertyExtractor: boolean contains(java.lang.Class)>(r1);

        if $z0 == 0 goto label2;

        $r8 = virtualinvoke r0.<edu.kit.ipd.sdq.eventsim.measurement.PropertyExtractor: java.util.function.Function get(java.lang.Class)>(r1);

        return $r8;

     label2:
        $r5 = virtualinvoke r1.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        i0 = lengthof $r5;

        i1 = 0;

        goto label5;

     label3:
        r2 = $r5[i1];

        r4 = specialinvoke r0.<edu.kit.ipd.sdq.eventsim.measurement.PropertyExtractor: java.util.function.Function extractorForType(java.lang.Class)>(r2);

        if r4 == null goto label4;

        return r4;

     label4:
        i1 = i1 + 1;

     label5:
        if i1 < i0 goto label3;

        $r6 = virtualinvoke r1.<java.lang.Class: java.lang.Class getSuperclass()>();

        $r7 = specialinvoke r0.<edu.kit.ipd.sdq.eventsim.measurement.PropertyExtractor: java.util.function.Function extractorForType(java.lang.Class)>($r6);

        return $r7;
    }

    public java.lang.String extractFrom(java.lang.Object)
    {
        edu.kit.ipd.sdq.eventsim.measurement.PropertyExtractor r0;
        java.lang.Object r1, $r4;
        java.lang.Class $r3, $r6, $r9, $r14;
        java.lang.String $r5, $r12, $r13;
        java.lang.StringBuilder $r7, $r10, $r11;
        org.apache.log4j.Logger $r8;
        java.util.function.Function r15;

        r0 := @this: edu.kit.ipd.sdq.eventsim.measurement.PropertyExtractor;

        r1 := @parameter0: java.lang.Object;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "Cannot extract properties for null");

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        r15 = virtualinvoke r0.<edu.kit.ipd.sdq.eventsim.measurement.PropertyExtractor: java.util.function.Function get(java.lang.Class)>($r3);

        if r15 != null goto label2;

        $r6 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        r15 = specialinvoke r0.<edu.kit.ipd.sdq.eventsim.measurement.PropertyExtractor: java.util.function.Function extractorForType(java.lang.Class)>($r6);

        if r15 == null goto label1;

        $r14 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        virtualinvoke r0.<edu.kit.ipd.sdq.eventsim.measurement.PropertyExtractor: void add(java.lang.Class,java.util.function.Function)>($r14, r15);

        goto label2;

     label1:
        $r8 = <edu.kit.ipd.sdq.eventsim.measurement.PropertyExtractor: org.apache.log4j.Logger log>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not find property extractor for class ");

        $r9 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r8.<org.apache.log4j.Logger: void warn(java.lang.Object)>($r12);

        $r13 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        return $r13;

     label2:
        $r4 = interfaceinvoke r15.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>(r1);

        $r5 = (java.lang.String) $r4;

        return $r5;
    }
}
