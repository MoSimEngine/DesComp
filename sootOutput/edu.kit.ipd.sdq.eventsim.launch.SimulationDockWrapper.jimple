public class edu.kit.ipd.sdq.eventsim.launch.SimulationDockWrapper extends java.lang.Object implements de.uka.ipd.sdq.simulation.IStatusObserver
{
    private static final java.lang.String DOCK_IDLE_TOPIC;
    private static final java.lang.String SIM_STOPPED_TOPIC;
    private static final java.lang.String SIM_STARTED_TOPIC;
    private static final java.lang.String DOCK_BUSY_TOPIC;
    private org.osgi.service.event.EventAdmin eventAdmin;
    private final de.uka.ipd.sdq.codegen.simucontroller.dockmodel.DockModel dock;

    private void <init>(de.uka.ipd.sdq.codegen.simucontroller.dockmodel.DockModel)
    {
        edu.kit.ipd.sdq.eventsim.launch.SimulationDockWrapper r0;
        de.uka.ipd.sdq.codegen.simucontroller.dockmodel.DockModel r1;
        org.osgi.service.event.EventAdmin $r2;

        r0 := @this: edu.kit.ipd.sdq.eventsim.launch.SimulationDockWrapper;

        r1 := @parameter0: de.uka.ipd.sdq.codegen.simucontroller.dockmodel.DockModel;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<edu.kit.ipd.sdq.eventsim.launch.SimulationDockWrapper: de.uka.ipd.sdq.codegen.simucontroller.dockmodel.DockModel dock> = r1;

        $r2 = specialinvoke r0.<edu.kit.ipd.sdq.eventsim.launch.SimulationDockWrapper: org.osgi.service.event.EventAdmin discoverEventAdmin()>();

        r0.<edu.kit.ipd.sdq.eventsim.launch.SimulationDockWrapper: org.osgi.service.event.EventAdmin eventAdmin> = $r2;

        return;
    }

    public static edu.kit.ipd.sdq.eventsim.launch.SimulationDockWrapper getBestFreeDock()
    {
        de.uka.ipd.sdq.codegen.simucontroller.dockmodel.DocksModel $r1;
        edu.kit.ipd.sdq.eventsim.launch.SimulationDockWrapper $r2;
        java.lang.InterruptedException $r3;
        de.uka.ipd.sdq.codegen.simucontroller.dockmodel.DockModel r4;

        r4 = null;

     label1:
        $r1 = staticinvoke <de.uka.ipd.sdq.codegen.simucontroller.SimuControllerPlugin: de.uka.ipd.sdq.codegen.simucontroller.dockmodel.DocksModel getDockModel()>();

        r4 = virtualinvoke $r1.<de.uka.ipd.sdq.codegen.simucontroller.dockmodel.DocksModel: de.uka.ipd.sdq.codegen.simucontroller.dockmodel.DockModel getBestFreeDock()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        virtualinvoke $r3.<java.lang.InterruptedException: void printStackTrace()>();

     label4:
        $r2 = new edu.kit.ipd.sdq.eventsim.launch.SimulationDockWrapper;

        specialinvoke $r2.<edu.kit.ipd.sdq.eventsim.launch.SimulationDockWrapper: void <init>(de.uka.ipd.sdq.codegen.simucontroller.dockmodel.DockModel)>(r4);

        return $r2;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    private org.osgi.service.event.EventAdmin discoverEventAdmin()
    {
        edu.kit.ipd.sdq.eventsim.launch.SimulationDockWrapper r0;
        org.osgi.framework.BundleContext r1;
        org.osgi.framework.ServiceReference r2;
        edu.kit.ipd.sdq.eventsim.launch.Activator $r4;
        org.osgi.framework.Bundle $r5;
        org.osgi.util.tracker.ServiceTracker $r6;
        java.lang.Object $r7;
        org.osgi.service.event.EventAdmin $r8;

        r0 := @this: edu.kit.ipd.sdq.eventsim.launch.SimulationDockWrapper;

        $r4 = staticinvoke <edu.kit.ipd.sdq.eventsim.launch.Activator: edu.kit.ipd.sdq.eventsim.launch.Activator getDefault()>();

        $r5 = virtualinvoke $r4.<edu.kit.ipd.sdq.eventsim.launch.Activator: org.osgi.framework.Bundle getBundle()>();

        r1 = interfaceinvoke $r5.<org.osgi.framework.Bundle: org.osgi.framework.BundleContext getBundleContext()>();

        r2 = interfaceinvoke r1.<org.osgi.framework.BundleContext: org.osgi.framework.ServiceReference getServiceReference(java.lang.Class)>(class "Lorg/osgi/service/event/EventAdmin;");

        $r6 = new org.osgi.util.tracker.ServiceTracker;

        specialinvoke $r6.<org.osgi.util.tracker.ServiceTracker: void <init>(org.osgi.framework.BundleContext,org.osgi.framework.ServiceReference,org.osgi.util.tracker.ServiceTrackerCustomizer)>(r1, r2, null);

        virtualinvoke $r6.<org.osgi.util.tracker.ServiceTracker: void open()>();

        $r7 = virtualinvoke $r6.<org.osgi.util.tracker.ServiceTracker: java.lang.Object getService()>();

        $r8 = (org.osgi.service.event.EventAdmin) $r7;

        return $r8;
    }

    private void sendEventToSimulationDock(java.lang.String, de.uka.ipd.sdq.codegen.simucontroller.dockmodel.DockModel)
    {
        edu.kit.ipd.sdq.eventsim.launch.SimulationDockWrapper r0;
        java.lang.String r1, $r5;
        de.uka.ipd.sdq.codegen.simucontroller.dockmodel.DockModel r2;
        java.util.Hashtable $r4;
        org.osgi.service.event.Event $r7;
        org.osgi.service.event.EventAdmin $r8;

        r0 := @this: edu.kit.ipd.sdq.eventsim.launch.SimulationDockWrapper;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: de.uka.ipd.sdq.codegen.simucontroller.dockmodel.DockModel;

        $r4 = new java.util.Hashtable;

        specialinvoke $r4.<java.util.Hashtable: void <init>()>();

        $r5 = virtualinvoke r2.<de.uka.ipd.sdq.codegen.simucontroller.dockmodel.DockModel: java.lang.String getID()>();

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("DOCK_ID", $r5);

        $r8 = r0.<edu.kit.ipd.sdq.eventsim.launch.SimulationDockWrapper: org.osgi.service.event.EventAdmin eventAdmin>;

        $r7 = new org.osgi.service.event.Event;

        specialinvoke $r7.<org.osgi.service.event.Event: void <init>(java.lang.String,java.util.Map)>(r1, $r4);

        interfaceinvoke $r8.<org.osgi.service.event.EventAdmin: void sendEvent(org.osgi.service.event.Event)>($r7);

        return;
    }

    public void start()
    {
        edu.kit.ipd.sdq.eventsim.launch.SimulationDockWrapper r0;
        de.uka.ipd.sdq.codegen.simucontroller.dockmodel.DockModel $r1, $r2;

        r0 := @this: edu.kit.ipd.sdq.eventsim.launch.SimulationDockWrapper;

        $r1 = r0.<edu.kit.ipd.sdq.eventsim.launch.SimulationDockWrapper: de.uka.ipd.sdq.codegen.simucontroller.dockmodel.DockModel dock>;

        specialinvoke r0.<edu.kit.ipd.sdq.eventsim.launch.SimulationDockWrapper: void sendEventToSimulationDock(java.lang.String,de.uka.ipd.sdq.codegen.simucontroller.dockmodel.DockModel)>("de/uka/ipd/sdq/simucomframework/simucomdock/DOCK_BUSY", $r1);

        $r2 = r0.<edu.kit.ipd.sdq.eventsim.launch.SimulationDockWrapper: de.uka.ipd.sdq.codegen.simucontroller.dockmodel.DockModel dock>;

        specialinvoke r0.<edu.kit.ipd.sdq.eventsim.launch.SimulationDockWrapper: void sendEventToSimulationDock(java.lang.String,de.uka.ipd.sdq.codegen.simucontroller.dockmodel.DockModel)>("de/uka/ipd/sdq/simucomframework/simucomdock/SIM_STARTED", $r2);

        return;
    }

    public void stop()
    {
        edu.kit.ipd.sdq.eventsim.launch.SimulationDockWrapper r0;
        de.uka.ipd.sdq.codegen.simucontroller.dockmodel.DockModel $r1, $r2;

        r0 := @this: edu.kit.ipd.sdq.eventsim.launch.SimulationDockWrapper;

        $r1 = r0.<edu.kit.ipd.sdq.eventsim.launch.SimulationDockWrapper: de.uka.ipd.sdq.codegen.simucontroller.dockmodel.DockModel dock>;

        specialinvoke r0.<edu.kit.ipd.sdq.eventsim.launch.SimulationDockWrapper: void sendEventToSimulationDock(java.lang.String,de.uka.ipd.sdq.codegen.simucontroller.dockmodel.DockModel)>("de/uka/ipd/sdq/simucomframework/simucomdock/SIM_STOPPED", $r1);

        $r2 = r0.<edu.kit.ipd.sdq.eventsim.launch.SimulationDockWrapper: de.uka.ipd.sdq.codegen.simucontroller.dockmodel.DockModel dock>;

        specialinvoke r0.<edu.kit.ipd.sdq.eventsim.launch.SimulationDockWrapper: void sendEventToSimulationDock(java.lang.String,de.uka.ipd.sdq.codegen.simucontroller.dockmodel.DockModel)>("de/uka/ipd/sdq/simucomframework/simucomdock/DOCK_IDLE", $r2);

        return;
    }

    public void updateStatus(int, double, long)
    {
        edu.kit.ipd.sdq.eventsim.launch.SimulationDockWrapper r0;
        int i0;
        double d0;
        long l1;
        de.uka.ipd.sdq.codegen.simucontroller.dockmodel.DockModel $r1, $r2, $r3;

        r0 := @this: edu.kit.ipd.sdq.eventsim.launch.SimulationDockWrapper;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        l1 := @parameter2: long;

        $r1 = r0.<edu.kit.ipd.sdq.eventsim.launch.SimulationDockWrapper: de.uka.ipd.sdq.codegen.simucontroller.dockmodel.DockModel dock>;

        virtualinvoke $r1.<de.uka.ipd.sdq.codegen.simucontroller.dockmodel.DockModel: void setMeasurementCount(long)>(l1);

        $r2 = r0.<edu.kit.ipd.sdq.eventsim.launch.SimulationDockWrapper: de.uka.ipd.sdq.codegen.simucontroller.dockmodel.DockModel dock>;

        virtualinvoke $r2.<de.uka.ipd.sdq.codegen.simucontroller.dockmodel.DockModel: void setPercentDone(int)>(i0);

        $r3 = r0.<edu.kit.ipd.sdq.eventsim.launch.SimulationDockWrapper: de.uka.ipd.sdq.codegen.simucontroller.dockmodel.DockModel dock>;

        virtualinvoke $r3.<de.uka.ipd.sdq.codegen.simucontroller.dockmodel.DockModel: void setSimTime(double)>(d0);

        return;
    }

    public static void <clinit>()
    {
        <edu.kit.ipd.sdq.eventsim.launch.SimulationDockWrapper: java.lang.String DOCK_BUSY_TOPIC> = "de/uka/ipd/sdq/simucomframework/simucomdock/DOCK_BUSY";

        <edu.kit.ipd.sdq.eventsim.launch.SimulationDockWrapper: java.lang.String SIM_STARTED_TOPIC> = "de/uka/ipd/sdq/simucomframework/simucomdock/SIM_STARTED";

        <edu.kit.ipd.sdq.eventsim.launch.SimulationDockWrapper: java.lang.String SIM_STOPPED_TOPIC> = "de/uka/ipd/sdq/simucomframework/simucomdock/SIM_STOPPED";

        <edu.kit.ipd.sdq.eventsim.launch.SimulationDockWrapper: java.lang.String DOCK_IDLE_TOPIC> = "de/uka/ipd/sdq/simucomframework/simucomdock/DOCK_IDLE";

        return;
    }
}
