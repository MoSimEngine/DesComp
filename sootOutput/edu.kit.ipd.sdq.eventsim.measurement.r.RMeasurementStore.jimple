public class edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore extends java.lang.Object implements edu.kit.ipd.sdq.eventsim.measurement.MeasurementStorage
{
    private static final int MAX_RETRIES_PUT_MEASUREMENT;
    private static final org.apache.log4j.Logger log;
    private static final int BUFFER_CAPACITY;
    private edu.kit.ipd.sdq.eventsim.measurement.r.Buffer buffer;
    private edu.kit.ipd.sdq.eventsim.measurement.PropertyExtractor idExtractor;
    private edu.kit.ipd.sdq.eventsim.measurement.PropertyExtractor nameExtractor;
    private edu.kit.ipd.sdq.eventsim.measurement.PropertyExtractor typeExtractor;
    private edu.kit.ipd.sdq.eventsim.measurement.r.connection.RserveConnection connection;
    private edu.kit.ipd.sdq.eventsim.measurement.r.RJobProcessor rJobProcessor;
    private int bufferNumber;
    private boolean storeRds;
    private java.lang.String rdsFilePath;
    private edu.kit.ipd.sdq.eventsim.measurement.Metadata[] globalMetadata;
    private java.util.concurrent.locks.ReentrantReadWriteLock bufferLock;

    static void <clinit>()
    {
        org.apache.log4j.Logger $r0;

        <edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore: int BUFFER_CAPACITY> = 10000;

        <edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore: int MAX_RETRIES_PUT_MEASUREMENT> = 10;

        $r0 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getLogger(java.lang.Class)>(class "Ledu/kit/ipd/sdq/eventsim/measurement/r/RMeasurementStore;");

        <edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore: org.apache.log4j.Logger log> = $r0;

        return;
    }

    public void <init>(edu.kit.ipd.sdq.eventsim.measurement.r.connection.RserveConnection)
    {
        edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore r0;
        edu.kit.ipd.sdq.eventsim.measurement.r.connection.RserveConnection r1;

        r0 := @this: edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore;

        r1 := @parameter0: edu.kit.ipd.sdq.eventsim.measurement.r.connection.RserveConnection;

        specialinvoke r0.<edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore: void <init>(edu.kit.ipd.sdq.eventsim.measurement.r.connection.RserveConnection,java.lang.String)>(r1, "");

        r0.<edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore: edu.kit.ipd.sdq.eventsim.measurement.r.connection.RserveConnection connection> = r1;

        r0.<edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore: boolean storeRds> = 0;

        return;
    }

    public void <init>(edu.kit.ipd.sdq.eventsim.measurement.r.connection.RserveConnection, java.lang.String)
    {
        edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore r0;
        edu.kit.ipd.sdq.eventsim.measurement.r.connection.RserveConnection r1;
        java.lang.String r2;
        java.util.concurrent.locks.ReentrantReadWriteLock $r3;
        edu.kit.ipd.sdq.eventsim.measurement.PropertyExtractor $r4, $r5, $r6, $r9, $r11, $r12, $r13;
        edu.kit.ipd.sdq.eventsim.measurement.r.RJobProcessor $r7;
        edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore$1 $r8;
        edu.kit.ipd.sdq.eventsim.measurement.r.Buffer $r10;

        r0 := @this: edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore;

        r1 := @parameter0: edu.kit.ipd.sdq.eventsim.measurement.r.connection.RserveConnection;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new java.util.concurrent.locks.ReentrantReadWriteLock;

        specialinvoke $r3.<java.util.concurrent.locks.ReentrantReadWriteLock: void <init>(boolean)>(0);

        r0.<edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore: java.util.concurrent.locks.ReentrantReadWriteLock bufferLock> = $r3;

        r0.<edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore: edu.kit.ipd.sdq.eventsim.measurement.r.connection.RserveConnection connection> = r1;

        r0.<edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore: boolean storeRds> = 1;

        r0.<edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore: java.lang.String rdsFilePath> = r2;

        $r4 = new edu.kit.ipd.sdq.eventsim.measurement.PropertyExtractor;

        specialinvoke $r4.<edu.kit.ipd.sdq.eventsim.measurement.PropertyExtractor: void <init>()>();

        r0.<edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore: edu.kit.ipd.sdq.eventsim.measurement.PropertyExtractor idExtractor> = $r4;

        $r5 = new edu.kit.ipd.sdq.eventsim.measurement.PropertyExtractor;

        specialinvoke $r5.<edu.kit.ipd.sdq.eventsim.measurement.PropertyExtractor: void <init>()>();

        r0.<edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore: edu.kit.ipd.sdq.eventsim.measurement.PropertyExtractor nameExtractor> = $r5;

        $r6 = new edu.kit.ipd.sdq.eventsim.measurement.PropertyExtractor;

        specialinvoke $r6.<edu.kit.ipd.sdq.eventsim.measurement.PropertyExtractor: void <init>()>();

        r0.<edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore: edu.kit.ipd.sdq.eventsim.measurement.PropertyExtractor typeExtractor> = $r6;

        $r7 = new edu.kit.ipd.sdq.eventsim.measurement.r.RJobProcessor;

        specialinvoke $r7.<edu.kit.ipd.sdq.eventsim.measurement.r.RJobProcessor: void <init>(edu.kit.ipd.sdq.eventsim.measurement.r.connection.RserveConnection)>(r1);

        r0.<edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore: edu.kit.ipd.sdq.eventsim.measurement.r.RJobProcessor rJobProcessor> = $r7;

        $r9 = r0.<edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore: edu.kit.ipd.sdq.eventsim.measurement.PropertyExtractor typeExtractor>;

        $r8 = new edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore$1;

        specialinvoke $r8.<edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore$1: void <init>(edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore)>(r0);

        virtualinvoke $r9.<edu.kit.ipd.sdq.eventsim.measurement.PropertyExtractor: void add(java.lang.Class,java.util.function.Function)>(class "Ljava/lang/Object;", $r8);

        $r10 = new edu.kit.ipd.sdq.eventsim.measurement.r.Buffer;

        $r13 = r0.<edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore: edu.kit.ipd.sdq.eventsim.measurement.PropertyExtractor idExtractor>;

        $r12 = r0.<edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore: edu.kit.ipd.sdq.eventsim.measurement.PropertyExtractor nameExtractor>;

        $r11 = r0.<edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore: edu.kit.ipd.sdq.eventsim.measurement.PropertyExtractor typeExtractor>;

        specialinvoke $r10.<edu.kit.ipd.sdq.eventsim.measurement.r.Buffer: void <init>(int,edu.kit.ipd.sdq.eventsim.measurement.PropertyExtractor,edu.kit.ipd.sdq.eventsim.measurement.PropertyExtractor,edu.kit.ipd.sdq.eventsim.measurement.PropertyExtractor)>(10000, $r13, $r12, $r11);

        r0.<edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore: edu.kit.ipd.sdq.eventsim.measurement.r.Buffer buffer> = $r10;

        return;
    }

    public static edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore fromLaunchConfiguration(java.util.Map, edu.kit.ipd.sdq.eventsim.measurement.r.connection.RserveConnection)
    {
        java.util.Map r0;
        edu.kit.ipd.sdq.eventsim.measurement.r.connection.RserveConnection r1;
        java.lang.Boolean r2;
        java.lang.String r3;
        java.lang.Object $r4, $r6;
        edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore $r5, $r7;
        boolean $z0;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: edu.kit.ipd.sdq.eventsim.measurement.r.connection.RserveConnection;

        $r4 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("rserve.createrdsfile");

        r2 = (java.lang.Boolean) $r4;

        if r2 == null goto label1;

        $z0 = virtualinvoke r2.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label2;

     label1:
        $r5 = new edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore;

        specialinvoke $r5.<edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore: void <init>(edu.kit.ipd.sdq.eventsim.measurement.r.connection.RserveConnection)>(r1);

        return $r5;

     label2:
        $r6 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("rserve.rdsfilepath");

        r3 = (java.lang.String) $r6;

        if r3 == null goto label3;

        $r7 = new edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore;

        specialinvoke $r7.<edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore: void <init>(edu.kit.ipd.sdq.eventsim.measurement.r.connection.RserveConnection,java.lang.String)>(r1, r3);

        return $r7;

     label3:
        return null;
    }

    public void addIdExtractor(java.lang.Class, java.util.function.Function)
    {
        edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore r0;
        java.lang.Class r1;
        java.util.function.Function r2;
        edu.kit.ipd.sdq.eventsim.measurement.PropertyExtractor $r3;

        r0 := @this: edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.util.function.Function;

        $r3 = r0.<edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore: edu.kit.ipd.sdq.eventsim.measurement.PropertyExtractor idExtractor>;

        virtualinvoke $r3.<edu.kit.ipd.sdq.eventsim.measurement.PropertyExtractor: void add(java.lang.Class,java.util.function.Function)>(r1, r2);

        return;
    }

    public void addNameExtractor(java.lang.Class, java.util.function.Function)
    {
        edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore r0;
        java.lang.Class r1;
        java.util.function.Function r2;
        edu.kit.ipd.sdq.eventsim.measurement.PropertyExtractor $r3;

        r0 := @this: edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.util.function.Function;

        $r3 = r0.<edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore: edu.kit.ipd.sdq.eventsim.measurement.PropertyExtractor nameExtractor>;

        virtualinvoke $r3.<edu.kit.ipd.sdq.eventsim.measurement.PropertyExtractor: void add(java.lang.Class,java.util.function.Function)>(r1, r2);

        return;
    }

    public void addTypeExtractor(java.lang.Class, java.util.function.Function)
    {
        edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore r0;
        java.lang.Class r1;
        java.util.function.Function r2;
        edu.kit.ipd.sdq.eventsim.measurement.PropertyExtractor $r3;

        r0 := @this: edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.util.function.Function;

        $r3 = r0.<edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore: edu.kit.ipd.sdq.eventsim.measurement.PropertyExtractor typeExtractor>;

        virtualinvoke $r3.<edu.kit.ipd.sdq.eventsim.measurement.PropertyExtractor: void add(java.lang.Class,java.util.function.Function)>(r1, r2);

        return;
    }

    public void put(edu.kit.ipd.sdq.eventsim.measurement.Measurement)
    {
        edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore r0;
        edu.kit.ipd.sdq.eventsim.measurement.Measurement r1;
        java.lang.StringBuilder $r2, $r4, $r5;
        org.apache.log4j.Logger $r3;
        java.lang.String $r6;
        java.util.concurrent.locks.ReentrantReadWriteLock $r7, $r12, $r15, $r17, $r20, $r22, $r32, $r35;
        java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock $r8, $r13, $r16, $r21, $r33;
        edu.kit.ipd.sdq.eventsim.measurement.r.Buffer $r9, $r11, $r19, $r26, $r27;
        boolean $z0, $z1, z2;
        edu.kit.ipd.sdq.eventsim.measurement.Metadata[] $r10, $r14;
        java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock $r18, $r23, $r36;
        edu.kit.ipd.sdq.eventsim.measurement.r.jobs.PushBufferToRJob $r24;
        int $i0, $i1, i2;
        edu.kit.ipd.sdq.eventsim.measurement.r.RJobProcessor $r25;
        edu.kit.ipd.sdq.eventsim.measurement.PropertyExtractor $r28, $r29, $r30;
        java.lang.Throwable $r31, $r34;

        r0 := @this: edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore;

        r1 := @parameter0: edu.kit.ipd.sdq.eventsim.measurement.Measurement;

        z2 = 0;

        i2 = 0;

        goto label10;

     label01:
        $r7 = r0.<edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore: java.util.concurrent.locks.ReentrantReadWriteLock bufferLock>;

        $r8 = virtualinvoke $r7.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock()>();

        virtualinvoke $r8.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void lock()>();

        $r9 = r0.<edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore: edu.kit.ipd.sdq.eventsim.measurement.r.Buffer buffer>;

        $z0 = virtualinvoke $r9.<edu.kit.ipd.sdq.eventsim.measurement.r.Buffer: boolean isFull()>();

        if $z0 == 0 goto label06;

        $r15 = r0.<edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore: java.util.concurrent.locks.ReentrantReadWriteLock bufferLock>;

        $r16 = virtualinvoke $r15.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock()>();

        virtualinvoke $r16.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void unlock()>();

        $r17 = r0.<edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore: java.util.concurrent.locks.ReentrantReadWriteLock bufferLock>;

        $r18 = virtualinvoke $r17.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>();

        virtualinvoke $r18.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void lock()>();

     label02:
        $r19 = r0.<edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore: edu.kit.ipd.sdq.eventsim.measurement.r.Buffer buffer>;

        $z1 = virtualinvoke $r19.<edu.kit.ipd.sdq.eventsim.measurement.r.Buffer: boolean isFull()>();

        if $z1 == 0 goto label03;

        $r25 = r0.<edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore: edu.kit.ipd.sdq.eventsim.measurement.r.RJobProcessor rJobProcessor>;

        $r24 = new edu.kit.ipd.sdq.eventsim.measurement.r.jobs.PushBufferToRJob;

        $r26 = r0.<edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore: edu.kit.ipd.sdq.eventsim.measurement.r.Buffer buffer>;

        $i0 = r0.<edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore: int bufferNumber>;

        $i1 = $i0 + 1;

        r0.<edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore: int bufferNumber> = $i1;

        specialinvoke $r24.<edu.kit.ipd.sdq.eventsim.measurement.r.jobs.PushBufferToRJob: void <init>(edu.kit.ipd.sdq.eventsim.measurement.r.Buffer,int)>($r26, $i0);

        virtualinvoke $r25.<edu.kit.ipd.sdq.eventsim.measurement.r.RJobProcessor: void enqueue(edu.kit.ipd.sdq.eventsim.measurement.r.RJob)>($r24);

        $r27 = new edu.kit.ipd.sdq.eventsim.measurement.r.Buffer;

        $r30 = r0.<edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore: edu.kit.ipd.sdq.eventsim.measurement.PropertyExtractor idExtractor>;

        $r29 = r0.<edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore: edu.kit.ipd.sdq.eventsim.measurement.PropertyExtractor nameExtractor>;

        $r28 = r0.<edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore: edu.kit.ipd.sdq.eventsim.measurement.PropertyExtractor typeExtractor>;

        specialinvoke $r27.<edu.kit.ipd.sdq.eventsim.measurement.r.Buffer: void <init>(int,edu.kit.ipd.sdq.eventsim.measurement.PropertyExtractor,edu.kit.ipd.sdq.eventsim.measurement.PropertyExtractor,edu.kit.ipd.sdq.eventsim.measurement.PropertyExtractor)>(10000, $r30, $r29, $r28);

        r0.<edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore: edu.kit.ipd.sdq.eventsim.measurement.r.Buffer buffer> = $r27;

     label03:
        $r20 = r0.<edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore: java.util.concurrent.locks.ReentrantReadWriteLock bufferLock>;

        $r21 = virtualinvoke $r20.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock()>();

        virtualinvoke $r21.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void lock()>();

        goto label05;

     label04:
        $r34 := @caughtexception;

        $r35 = r0.<edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore: java.util.concurrent.locks.ReentrantReadWriteLock bufferLock>;

        $r36 = virtualinvoke $r35.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>();

        virtualinvoke $r36.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>();

        throw $r34;

     label05:
        $r22 = r0.<edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore: java.util.concurrent.locks.ReentrantReadWriteLock bufferLock>;

        $r23 = virtualinvoke $r22.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>();

        virtualinvoke $r23.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>();

     label06:
        $r10 = r0.<edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore: edu.kit.ipd.sdq.eventsim.measurement.Metadata[] globalMetadata>;

        if $r10 == null goto label07;

        $r14 = r0.<edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore: edu.kit.ipd.sdq.eventsim.measurement.Metadata[] globalMetadata>;

        virtualinvoke r1.<edu.kit.ipd.sdq.eventsim.measurement.Measurement: void addMetadata(edu.kit.ipd.sdq.eventsim.measurement.Metadata[])>($r14);

     label07:
        $r11 = r0.<edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore: edu.kit.ipd.sdq.eventsim.measurement.r.Buffer buffer>;

        z2 = virtualinvoke $r11.<edu.kit.ipd.sdq.eventsim.measurement.r.Buffer: boolean put(edu.kit.ipd.sdq.eventsim.measurement.Measurement)>(r1);

        goto label09;

     label08:
        $r31 := @caughtexception;

        $r32 = r0.<edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore: java.util.concurrent.locks.ReentrantReadWriteLock bufferLock>;

        $r33 = virtualinvoke $r32.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock()>();

        virtualinvoke $r33.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void unlock()>();

        throw $r31;

     label09:
        $r12 = r0.<edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore: java.util.concurrent.locks.ReentrantReadWriteLock bufferLock>;

        $r13 = virtualinvoke $r12.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock()>();

        virtualinvoke $r13.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void unlock()>();

        i2 = i2 + 1;

     label10:
        if z2 != 0 goto label11;

        if i2 < 11 goto label01;

     label11:
        if z2 != 0 goto label12;

        $r3 = <edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore: org.apache.log4j.Logger log>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("Failed to add measurement ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to buffer after multiple retries.");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<org.apache.log4j.Logger: void warn(java.lang.Object)>($r6);

     label12:
        return;

        catch java.lang.Throwable from label02 to label04 with label04;
        catch java.lang.Throwable from label06 to label08 with label08;
    }

    public transient void addMetadata(edu.kit.ipd.sdq.eventsim.measurement.Metadata[])
    {
        edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore r0;
        edu.kit.ipd.sdq.eventsim.measurement.Metadata[] r1;

        r0 := @this: edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore;

        r1 := @parameter0: edu.kit.ipd.sdq.eventsim.measurement.Metadata[];

        r0.<edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore: edu.kit.ipd.sdq.eventsim.measurement.Metadata[] globalMetadata> = r1;

        return;
    }

    public void addMetadata(java.util.List)
    {
        edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore r0;
        java.util.List r1;
        int $i0;
        edu.kit.ipd.sdq.eventsim.measurement.Metadata[] $r2, $r4;
        java.lang.Object[] $r3;

        r0 := @this: edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore;

        r1 := @parameter0: java.util.List;

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        $r2 = newarray (edu.kit.ipd.sdq.eventsim.measurement.Metadata)[$i0];

        $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r2);

        $r4 = (edu.kit.ipd.sdq.eventsim.measurement.Metadata[]) $r3;

        r0.<edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore: edu.kit.ipd.sdq.eventsim.measurement.Metadata[] globalMetadata> = $r4;

        return;
    }

    public void start() throws edu.kit.ipd.sdq.eventsim.measurement.MeasurementStorageStartException
    {
        edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore r0;
        edu.kit.ipd.sdq.eventsim.measurement.r.connection.RserveConnection $r1, $r3;
        edu.kit.ipd.sdq.eventsim.measurement.MeasurementStorageStartException $r2;
        boolean $z0;
        edu.kit.ipd.sdq.eventsim.measurement.r.RJobProcessor $r4;

        r0 := @this: edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore;

        $r1 = r0.<edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore: edu.kit.ipd.sdq.eventsim.measurement.r.connection.RserveConnection connection>;

        if $r1 == null goto label1;

        $r3 = r0.<edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore: edu.kit.ipd.sdq.eventsim.measurement.r.connection.RserveConnection connection>;

        $z0 = virtualinvoke $r3.<edu.kit.ipd.sdq.eventsim.measurement.r.connection.RserveConnection: boolean isConnected()>();

        if $z0 == 0 goto label1;

        $r4 = r0.<edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore: edu.kit.ipd.sdq.eventsim.measurement.r.RJobProcessor rJobProcessor>;

        virtualinvoke $r4.<edu.kit.ipd.sdq.eventsim.measurement.r.RJobProcessor: void start()>();

        goto label2;

     label1:
        $r2 = new edu.kit.ipd.sdq.eventsim.measurement.MeasurementStorageStartException;

        specialinvoke $r2.<edu.kit.ipd.sdq.eventsim.measurement.MeasurementStorageStartException: void <init>(java.lang.String)>("No connection to R available. Run Rserve, e.g. by calling \"library(Rserve); Rserve()\" in R.");

        throw $r2;

     label2:
        return;
    }

    public void finish()
    {
        edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore r0;
        edu.kit.ipd.sdq.eventsim.measurement.r.RJob r1;
        java.util.Iterator r2;
        org.apache.log4j.Logger $r4, $r16, $r21;
        java.util.concurrent.locks.ReentrantReadWriteLock $r5, $r29, $r35;
        java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock $r6, $r30, $r36;
        edu.kit.ipd.sdq.eventsim.measurement.r.Buffer $r7, $r10, $r25;
        edu.kit.ipd.sdq.eventsim.measurement.r.jobs.PushBufferToRJob $r8;
        int $i0, $i1;
        edu.kit.ipd.sdq.eventsim.measurement.r.RJobProcessor $r9, $r12, $r20, $r23, $r24, $r33;
        edu.kit.ipd.sdq.eventsim.measurement.r.jobs.MergeBufferedDataFramesJob $r11;
        java.util.List $r13;
        boolean $z0, $z1;
        java.lang.Object $r14;
        java.lang.StringBuilder $r15, $r18;
        java.lang.String $r17, $r19, $r32;
        edu.kit.ipd.sdq.eventsim.measurement.r.jobs.FinalizeRProcessingJob $r22;
        edu.kit.ipd.sdq.eventsim.measurement.PropertyExtractor $r26, $r27, $r28;
        edu.kit.ipd.sdq.eventsim.measurement.r.jobs.StoreRDSFileJob $r31;
        java.lang.Throwable $r34;

        r0 := @this: edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore;

        $r4 = <edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore: org.apache.log4j.Logger log>;

        virtualinvoke $r4.<org.apache.log4j.Logger: void info(java.lang.Object)>("Closing R measurement store...");

        $r5 = r0.<edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore: java.util.concurrent.locks.ReentrantReadWriteLock bufferLock>;

        $r6 = virtualinvoke $r5.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>();

        virtualinvoke $r6.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void lock()>();

     label1:
        $r7 = r0.<edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore: edu.kit.ipd.sdq.eventsim.measurement.r.Buffer buffer>;

        virtualinvoke $r7.<edu.kit.ipd.sdq.eventsim.measurement.r.Buffer: void shrinkToSize()>();

        $r9 = r0.<edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore: edu.kit.ipd.sdq.eventsim.measurement.r.RJobProcessor rJobProcessor>;

        $r8 = new edu.kit.ipd.sdq.eventsim.measurement.r.jobs.PushBufferToRJob;

        $r10 = r0.<edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore: edu.kit.ipd.sdq.eventsim.measurement.r.Buffer buffer>;

        $i0 = r0.<edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore: int bufferNumber>;

        $i1 = $i0 + 1;

        r0.<edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore: int bufferNumber> = $i1;

        specialinvoke $r8.<edu.kit.ipd.sdq.eventsim.measurement.r.jobs.PushBufferToRJob: void <init>(edu.kit.ipd.sdq.eventsim.measurement.r.Buffer,int)>($r10, $i0);

        virtualinvoke $r9.<edu.kit.ipd.sdq.eventsim.measurement.r.RJobProcessor: void enqueue(edu.kit.ipd.sdq.eventsim.measurement.r.RJob)>($r8);

        $r12 = r0.<edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore: edu.kit.ipd.sdq.eventsim.measurement.r.RJobProcessor rJobProcessor>;

        $r11 = new edu.kit.ipd.sdq.eventsim.measurement.r.jobs.MergeBufferedDataFramesJob;

        specialinvoke $r11.<edu.kit.ipd.sdq.eventsim.measurement.r.jobs.MergeBufferedDataFramesJob: void <init>()>();

        virtualinvoke $r12.<edu.kit.ipd.sdq.eventsim.measurement.r.RJobProcessor: void enqueue(edu.kit.ipd.sdq.eventsim.measurement.r.RJob)>($r11);

        $r13 = staticinvoke <edu.kit.ipd.sdq.eventsim.measurement.r.JobExtensionHelper: java.util.List createExtensionJobs()>();

        r2 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>();

        goto label3;

     label2:
        $r14 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r1 = (edu.kit.ipd.sdq.eventsim.measurement.r.RJob) $r14;

        $r16 = <edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore: org.apache.log4j.Logger log>;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>(java.lang.String)>("Processing R extension job: ");

        $r17 = interfaceinvoke r1.<edu.kit.ipd.sdq.eventsim.measurement.r.RJob: java.lang.String getName()>();

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r16.<org.apache.log4j.Logger: void info(java.lang.Object)>($r19);

        $r20 = r0.<edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore: edu.kit.ipd.sdq.eventsim.measurement.r.RJobProcessor rJobProcessor>;

        virtualinvoke $r20.<edu.kit.ipd.sdq.eventsim.measurement.r.RJobProcessor: void enqueue(edu.kit.ipd.sdq.eventsim.measurement.r.RJob)>(r1);

     label3:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        $z1 = r0.<edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore: boolean storeRds>;

        if $z1 == 0 goto label4;

        $r33 = r0.<edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore: edu.kit.ipd.sdq.eventsim.measurement.r.RJobProcessor rJobProcessor>;

        $r31 = new edu.kit.ipd.sdq.eventsim.measurement.r.jobs.StoreRDSFileJob;

        $r32 = r0.<edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore: java.lang.String rdsFilePath>;

        specialinvoke $r31.<edu.kit.ipd.sdq.eventsim.measurement.r.jobs.StoreRDSFileJob: void <init>(java.lang.String)>($r32);

        virtualinvoke $r33.<edu.kit.ipd.sdq.eventsim.measurement.r.RJobProcessor: void enqueue(edu.kit.ipd.sdq.eventsim.measurement.r.RJob)>($r31);

        goto label5;

     label4:
        $r21 = <edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore: org.apache.log4j.Logger log>;

        virtualinvoke $r21.<org.apache.log4j.Logger: void info(java.lang.Object)>("Skipping creation of RDS file.");

     label5:
        $r23 = r0.<edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore: edu.kit.ipd.sdq.eventsim.measurement.r.RJobProcessor rJobProcessor>;

        $r22 = new edu.kit.ipd.sdq.eventsim.measurement.r.jobs.FinalizeRProcessingJob;

        specialinvoke $r22.<edu.kit.ipd.sdq.eventsim.measurement.r.jobs.FinalizeRProcessingJob: void <init>()>();

        virtualinvoke $r23.<edu.kit.ipd.sdq.eventsim.measurement.r.RJobProcessor: void enqueue(edu.kit.ipd.sdq.eventsim.measurement.r.RJob)>($r22);

        $r24 = r0.<edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore: edu.kit.ipd.sdq.eventsim.measurement.r.RJobProcessor rJobProcessor>;

        virtualinvoke $r24.<edu.kit.ipd.sdq.eventsim.measurement.r.RJobProcessor: void waitUntilFinished()>();

        $r25 = new edu.kit.ipd.sdq.eventsim.measurement.r.Buffer;

        $r28 = r0.<edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore: edu.kit.ipd.sdq.eventsim.measurement.PropertyExtractor idExtractor>;

        $r27 = r0.<edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore: edu.kit.ipd.sdq.eventsim.measurement.PropertyExtractor nameExtractor>;

        $r26 = r0.<edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore: edu.kit.ipd.sdq.eventsim.measurement.PropertyExtractor typeExtractor>;

        specialinvoke $r25.<edu.kit.ipd.sdq.eventsim.measurement.r.Buffer: void <init>(int,edu.kit.ipd.sdq.eventsim.measurement.PropertyExtractor,edu.kit.ipd.sdq.eventsim.measurement.PropertyExtractor,edu.kit.ipd.sdq.eventsim.measurement.PropertyExtractor)>(10000, $r28, $r27, $r26);

        r0.<edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore: edu.kit.ipd.sdq.eventsim.measurement.r.Buffer buffer> = $r25;

        r0.<edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore: int bufferNumber> = 0;

        goto label7;

     label6:
        $r34 := @caughtexception;

        $r35 = r0.<edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore: java.util.concurrent.locks.ReentrantReadWriteLock bufferLock>;

        $r36 = virtualinvoke $r35.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>();

        virtualinvoke $r36.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>();

        throw $r34;

     label7:
        $r29 = r0.<edu.kit.ipd.sdq.eventsim.measurement.r.RMeasurementStore: java.util.concurrent.locks.ReentrantReadWriteLock bufferLock>;

        $r30 = virtualinvoke $r29.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>();

        virtualinvoke $r30.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>();

        return;

        catch java.lang.Throwable from label1 to label6 with label6;
    }
}
