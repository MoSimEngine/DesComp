public class org.eclipse.wb.swt.SWTResourceManager extends java.lang.Object
{
    private static java.util.Map m_colorMap;
    private static java.util.Map m_imageMap;
    private static final int MISSING_IMAGE_SIZE;
    public static final int TOP_LEFT;
    public static final int TOP_RIGHT;
    public static final int BOTTOM_LEFT;
    public static final int BOTTOM_RIGHT;
    protected static final int LAST_CORNER_KEY;
    private static java.util.Map[] m_decoratedImageMap;
    private static java.util.Map m_fontMap;
    private static java.util.Map m_fontToBoldFontMap;
    private static java.util.Map m_idToCursorMap;

    static void <clinit>()
    {
        java.util.HashMap $r0, $r1, $r3, $r4, $r5;
        java.util.Map[] $r2;

        <org.eclipse.wb.swt.SWTResourceManager: int LAST_CORNER_KEY> = 5;

        <org.eclipse.wb.swt.SWTResourceManager: int BOTTOM_RIGHT> = 4;

        <org.eclipse.wb.swt.SWTResourceManager: int BOTTOM_LEFT> = 3;

        <org.eclipse.wb.swt.SWTResourceManager: int TOP_RIGHT> = 2;

        <org.eclipse.wb.swt.SWTResourceManager: int TOP_LEFT> = 1;

        <org.eclipse.wb.swt.SWTResourceManager: int MISSING_IMAGE_SIZE> = 10;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <org.eclipse.wb.swt.SWTResourceManager: java.util.Map m_colorMap> = $r0;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        <org.eclipse.wb.swt.SWTResourceManager: java.util.Map m_imageMap> = $r1;

        $r2 = newarray (java.util.Map)[5];

        <org.eclipse.wb.swt.SWTResourceManager: java.util.Map[] m_decoratedImageMap> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        <org.eclipse.wb.swt.SWTResourceManager: java.util.Map m_fontMap> = $r3;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        <org.eclipse.wb.swt.SWTResourceManager: java.util.Map m_fontToBoldFontMap> = $r4;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        <org.eclipse.wb.swt.SWTResourceManager: java.util.Map m_idToCursorMap> = $r5;

        return;
    }

    public void <init>()
    {
        org.eclipse.wb.swt.SWTResourceManager r0;

        r0 := @this: org.eclipse.wb.swt.SWTResourceManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.eclipse.swt.graphics.Color getColor(int)
    {
        int i0;
        org.eclipse.swt.widgets.Display r0;
        org.eclipse.swt.graphics.Color $r1;

        i0 := @parameter0: int;

        r0 = staticinvoke <org.eclipse.swt.widgets.Display: org.eclipse.swt.widgets.Display getCurrent()>();

        $r1 = virtualinvoke r0.<org.eclipse.swt.widgets.Display: org.eclipse.swt.graphics.Color getSystemColor(int)>(i0);

        return $r1;
    }

    public static org.eclipse.swt.graphics.Color getColor(int, int, int)
    {
        int i0, i1, i2;
        org.eclipse.swt.graphics.RGB $r0;
        org.eclipse.swt.graphics.Color $r1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $r0 = new org.eclipse.swt.graphics.RGB;

        specialinvoke $r0.<org.eclipse.swt.graphics.RGB: void <init>(int,int,int)>(i0, i1, i2);

        $r1 = staticinvoke <org.eclipse.wb.swt.SWTResourceManager: org.eclipse.swt.graphics.Color getColor(org.eclipse.swt.graphics.RGB)>($r0);

        return $r1;
    }

    public static org.eclipse.swt.graphics.Color getColor(org.eclipse.swt.graphics.RGB)
    {
        org.eclipse.swt.graphics.RGB r0;
        org.eclipse.swt.widgets.Display r1;
        java.util.Map $r2, $r5;
        java.lang.Object $r3;
        org.eclipse.swt.graphics.Color $r4, r7;

        r0 := @parameter0: org.eclipse.swt.graphics.RGB;

        $r2 = <org.eclipse.wb.swt.SWTResourceManager: java.util.Map m_colorMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r7 = (org.eclipse.swt.graphics.Color) $r3;

        if r7 != null goto label1;

        r1 = staticinvoke <org.eclipse.swt.widgets.Display: org.eclipse.swt.widgets.Display getCurrent()>();

        $r4 = new org.eclipse.swt.graphics.Color;

        specialinvoke $r4.<org.eclipse.swt.graphics.Color: void <init>(org.eclipse.swt.graphics.Device,org.eclipse.swt.graphics.RGB)>(r1, r0);

        r7 = $r4;

        $r5 = <org.eclipse.wb.swt.SWTResourceManager: java.util.Map m_colorMap>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r4);

     label1:
        return r7;
    }

    public static void disposeColors()
    {
        org.eclipse.swt.graphics.Color r0;
        java.util.Iterator r1;
        java.util.Map $r2, $r5;
        java.util.Collection $r3;
        boolean $z0;
        java.lang.Object $r4;

        $r2 = <org.eclipse.wb.swt.SWTResourceManager: java.util.Map m_colorMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>();

        r1 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r0 = (org.eclipse.swt.graphics.Color) $r4;

        virtualinvoke r0.<org.eclipse.swt.graphics.Color: void dispose()>();

     label2:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r5 = <org.eclipse.wb.swt.SWTResourceManager: java.util.Map m_colorMap>;

        interfaceinvoke $r5.<java.util.Map: void clear()>();

        return;
    }

    protected static org.eclipse.swt.graphics.Image getImage(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream r0;
        org.eclipse.swt.widgets.Display r1;
        org.eclipse.swt.graphics.ImageData $r4, $r7;
        int $i0;
        org.eclipse.swt.graphics.Image $r5, $r6;
        java.lang.Throwable $r8;

        r0 := @parameter0: java.io.InputStream;

     label1:
        r1 = staticinvoke <org.eclipse.swt.widgets.Display: org.eclipse.swt.widgets.Display getCurrent()>();

        $r4 = new org.eclipse.swt.graphics.ImageData;

        specialinvoke $r4.<org.eclipse.swt.graphics.ImageData: void <init>(java.io.InputStream)>(r0);

        $i0 = $r4.<org.eclipse.swt.graphics.ImageData: int transparentPixel>;

        if $i0 <= 0 goto label3;

        $r6 = new org.eclipse.swt.graphics.Image;

        $r7 = virtualinvoke $r4.<org.eclipse.swt.graphics.ImageData: org.eclipse.swt.graphics.ImageData getTransparencyMask()>();

        specialinvoke $r6.<org.eclipse.swt.graphics.Image: void <init>(org.eclipse.swt.graphics.Device,org.eclipse.swt.graphics.ImageData,org.eclipse.swt.graphics.ImageData)>(r1, $r4, $r7);

     label2:
        virtualinvoke r0.<java.io.InputStream: void close()>();

        return $r6;

     label3:
        $r5 = new org.eclipse.swt.graphics.Image;

        specialinvoke $r5.<org.eclipse.swt.graphics.Image: void <init>(org.eclipse.swt.graphics.Device,org.eclipse.swt.graphics.ImageData)>(r1, $r4);

     label4:
        virtualinvoke r0.<java.io.InputStream: void close()>();

        return $r5;

     label5:
        $r8 := @caughtexception;

        virtualinvoke r0.<java.io.InputStream: void close()>();

        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public static org.eclipse.swt.graphics.Image getImage(java.lang.String)
    {
        java.lang.String r0;
        java.util.Map $r2, $r5, $r8;
        java.lang.Object $r3;
        java.io.FileInputStream $r4;
        java.lang.Exception $r7;
        org.eclipse.swt.graphics.Image r10;

        r0 := @parameter0: java.lang.String;

        $r2 = <org.eclipse.wb.swt.SWTResourceManager: java.util.Map m_imageMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r10 = (org.eclipse.swt.graphics.Image) $r3;

        if r10 != null goto label4;

     label1:
        $r4 = new java.io.FileInputStream;

        specialinvoke $r4.<java.io.FileInputStream: void <init>(java.lang.String)>(r0);

        r10 = staticinvoke <org.eclipse.wb.swt.SWTResourceManager: org.eclipse.swt.graphics.Image getImage(java.io.InputStream)>($r4);

        $r5 = <org.eclipse.wb.swt.SWTResourceManager: java.util.Map m_imageMap>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r10);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        r10 = staticinvoke <org.eclipse.wb.swt.SWTResourceManager: org.eclipse.swt.graphics.Image getMissingImage()>();

        $r8 = <org.eclipse.wb.swt.SWTResourceManager: java.util.Map m_imageMap>;

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r10);

     label4:
        return r10;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static org.eclipse.swt.graphics.Image getImage(java.lang.Class, java.lang.String)
    {
        java.lang.Class r0;
        java.lang.String r1, r2, $r5, $r6;
        java.lang.StringBuilder $r4, $r7, $r8;
        java.util.Map $r9, $r12, $r15;
        java.lang.Object $r10;
        java.io.InputStream $r11;
        java.lang.Exception $r14;
        org.eclipse.swt.graphics.Image r17;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        $r4 = new java.lang.StringBuilder;

        $r5 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r5);

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>($r6);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(124);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        r2 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = <org.eclipse.wb.swt.SWTResourceManager: java.util.Map m_imageMap>;

        $r10 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r17 = (org.eclipse.swt.graphics.Image) $r10;

        if r17 != null goto label4;

     label1:
        $r11 = virtualinvoke r0.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>(r1);

        r17 = staticinvoke <org.eclipse.wb.swt.SWTResourceManager: org.eclipse.swt.graphics.Image getImage(java.io.InputStream)>($r11);

        $r12 = <org.eclipse.wb.swt.SWTResourceManager: java.util.Map m_imageMap>;

        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r17);

     label2:
        goto label4;

     label3:
        $r14 := @caughtexception;

        r17 = staticinvoke <org.eclipse.wb.swt.SWTResourceManager: org.eclipse.swt.graphics.Image getMissingImage()>();

        $r15 = <org.eclipse.wb.swt.SWTResourceManager: java.util.Map m_imageMap>;

        interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r17);

     label4:
        return r17;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private static org.eclipse.swt.graphics.Image getMissingImage()
    {
        org.eclipse.swt.graphics.Image $r2;
        org.eclipse.swt.widgets.Display $r3;
        org.eclipse.swt.graphics.GC $r4;
        org.eclipse.swt.graphics.Color $r5;

        $r2 = new org.eclipse.swt.graphics.Image;

        $r3 = staticinvoke <org.eclipse.swt.widgets.Display: org.eclipse.swt.widgets.Display getCurrent()>();

        specialinvoke $r2.<org.eclipse.swt.graphics.Image: void <init>(org.eclipse.swt.graphics.Device,int,int)>($r3, 10, 10);

        $r4 = new org.eclipse.swt.graphics.GC;

        specialinvoke $r4.<org.eclipse.swt.graphics.GC: void <init>(org.eclipse.swt.graphics.Drawable)>($r2);

        $r5 = staticinvoke <org.eclipse.wb.swt.SWTResourceManager: org.eclipse.swt.graphics.Color getColor(int)>(3);

        virtualinvoke $r4.<org.eclipse.swt.graphics.GC: void setBackground(org.eclipse.swt.graphics.Color)>($r5);

        virtualinvoke $r4.<org.eclipse.swt.graphics.GC: void fillRectangle(int,int,int,int)>(0, 0, 10, 10);

        virtualinvoke $r4.<org.eclipse.swt.graphics.GC: void dispose()>();

        return $r2;
    }

    public static org.eclipse.swt.graphics.Image decorateImage(org.eclipse.swt.graphics.Image, org.eclipse.swt.graphics.Image)
    {
        org.eclipse.swt.graphics.Image r0, r1, $r2;

        r0 := @parameter0: org.eclipse.swt.graphics.Image;

        r1 := @parameter1: org.eclipse.swt.graphics.Image;

        $r2 = staticinvoke <org.eclipse.wb.swt.SWTResourceManager: org.eclipse.swt.graphics.Image decorateImage(org.eclipse.swt.graphics.Image,org.eclipse.swt.graphics.Image,int)>(r0, r1, 4);

        return $r2;
    }

    public static org.eclipse.swt.graphics.Image decorateImage(org.eclipse.swt.graphics.Image, org.eclipse.swt.graphics.Image, int)
    {
        org.eclipse.swt.graphics.Image r0, r1, $r9, r19;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        org.eclipse.swt.graphics.Rectangle r2, r3;
        java.lang.IllegalArgumentException $r5;
        java.util.Map[] $r6, $r16;
        java.lang.Object $r7, $r8;
        org.eclipse.swt.widgets.Display $r10;
        org.eclipse.swt.graphics.GC $r11;
        java.util.HashMap $r13, $r15;
        java.util.Map r17, r18;

        r0 := @parameter0: org.eclipse.swt.graphics.Image;

        r1 := @parameter1: org.eclipse.swt.graphics.Image;

        i0 := @parameter2: int;

        if i0 <= 0 goto label1;

        if i0 < 5 goto label2;

     label1:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Wrong decorate corner");

        throw $r5;

     label2:
        $r6 = <org.eclipse.wb.swt.SWTResourceManager: java.util.Map[] m_decoratedImageMap>;

        r17 = $r6[i0];

        if r17 != null goto label3;

        $r15 = new java.util.HashMap;

        specialinvoke $r15.<java.util.HashMap: void <init>()>();

        r17 = $r15;

        $r16 = <org.eclipse.wb.swt.SWTResourceManager: java.util.Map[] m_decoratedImageMap>;

        $r16[i0] = $r15;

     label3:
        $r7 = interfaceinvoke r17.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r18 = (java.util.Map) $r7;

        if r18 != null goto label4;

        $r13 = new java.util.HashMap;

        specialinvoke $r13.<java.util.HashMap: void <init>()>();

        r18 = $r13;

        interfaceinvoke r17.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r13);

     label4:
        $r8 = interfaceinvoke r18.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r19 = (org.eclipse.swt.graphics.Image) $r8;

        if r19 != null goto label9;

        r2 = virtualinvoke r0.<org.eclipse.swt.graphics.Image: org.eclipse.swt.graphics.Rectangle getBounds()>();

        r3 = virtualinvoke r1.<org.eclipse.swt.graphics.Image: org.eclipse.swt.graphics.Rectangle getBounds()>();

        $r9 = new org.eclipse.swt.graphics.Image;

        $r10 = staticinvoke <org.eclipse.swt.widgets.Display: org.eclipse.swt.widgets.Display getCurrent()>();

        $i2 = r2.<org.eclipse.swt.graphics.Rectangle: int width>;

        $i1 = r2.<org.eclipse.swt.graphics.Rectangle: int height>;

        specialinvoke $r9.<org.eclipse.swt.graphics.Image: void <init>(org.eclipse.swt.graphics.Device,int,int)>($r10, $i2, $i1);

        r19 = $r9;

        $r11 = new org.eclipse.swt.graphics.GC;

        specialinvoke $r11.<org.eclipse.swt.graphics.GC: void <init>(org.eclipse.swt.graphics.Drawable)>($r9);

        virtualinvoke $r11.<org.eclipse.swt.graphics.GC: void drawImage(org.eclipse.swt.graphics.Image,int,int)>(r0, 0, 0);

        if i0 != 1 goto label5;

        virtualinvoke $r11.<org.eclipse.swt.graphics.GC: void drawImage(org.eclipse.swt.graphics.Image,int,int)>(r1, 0, 0);

        goto label8;

     label5:
        if i0 != 2 goto label6;

        $i13 = r2.<org.eclipse.swt.graphics.Rectangle: int width>;

        $i12 = r3.<org.eclipse.swt.graphics.Rectangle: int width>;

        $i14 = $i13 - $i12;

        virtualinvoke $r11.<org.eclipse.swt.graphics.GC: void drawImage(org.eclipse.swt.graphics.Image,int,int)>(r1, $i14, 0);

        goto label8;

     label6:
        if i0 != 3 goto label7;

        $i10 = r2.<org.eclipse.swt.graphics.Rectangle: int height>;

        $i9 = r3.<org.eclipse.swt.graphics.Rectangle: int height>;

        $i11 = $i10 - $i9;

        virtualinvoke $r11.<org.eclipse.swt.graphics.GC: void drawImage(org.eclipse.swt.graphics.Image,int,int)>(r1, 0, $i11);

        goto label8;

     label7:
        if i0 != 4 goto label8;

        $i4 = r2.<org.eclipse.swt.graphics.Rectangle: int width>;

        $i3 = r3.<org.eclipse.swt.graphics.Rectangle: int width>;

        $i8 = $i4 - $i3;

        $i6 = r2.<org.eclipse.swt.graphics.Rectangle: int height>;

        $i5 = r3.<org.eclipse.swt.graphics.Rectangle: int height>;

        $i7 = $i6 - $i5;

        virtualinvoke $r11.<org.eclipse.swt.graphics.GC: void drawImage(org.eclipse.swt.graphics.Image,int,int)>(r1, $i8, $i7);

     label8:
        virtualinvoke $r11.<org.eclipse.swt.graphics.GC: void dispose()>();

        interfaceinvoke r18.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r9);

     label9:
        return r19;
    }

    public static void disposeImages()
    {
        java.util.Map r0, $r4, $r7, r15;
        java.util.Iterator r1, r3, r13;
        org.eclipse.swt.graphics.Image r2, r14;
        java.util.Collection $r5, $r9, $r11;
        boolean $z0, $z1, $z2;
        java.lang.Object $r6, $r10, $r12;
        java.util.Map[] $r8, $r16;
        int i0, $i1;

        $r4 = <org.eclipse.wb.swt.SWTResourceManager: java.util.Map m_imageMap>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Collection values()>();

        r13 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r6 = interfaceinvoke r13.<java.util.Iterator: java.lang.Object next()>();

        r14 = (org.eclipse.swt.graphics.Image) $r6;

        virtualinvoke r14.<org.eclipse.swt.graphics.Image: void dispose()>();

     label2:
        $z0 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r7 = <org.eclipse.wb.swt.SWTResourceManager: java.util.Map m_imageMap>;

        interfaceinvoke $r7.<java.util.Map: void clear()>();

        i0 = 0;

        goto label9;

     label3:
        $r8 = <org.eclipse.wb.swt.SWTResourceManager: java.util.Map[] m_decoratedImageMap>;

        r15 = $r8[i0];

        if r15 == null goto label8;

        $r9 = interfaceinvoke r15.<java.util.Map: java.util.Collection values()>();

        r1 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>();

        goto label7;

     label4:
        $r10 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r0 = (java.util.Map) $r10;

        $r11 = interfaceinvoke r0.<java.util.Map: java.util.Collection values()>();

        r3 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();

        goto label6;

     label5:
        $r12 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r2 = (org.eclipse.swt.graphics.Image) $r12;

        virtualinvoke r2.<org.eclipse.swt.graphics.Image: void dispose()>();

     label6:
        $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 != 0 goto label5;

        interfaceinvoke r0.<java.util.Map: void clear()>();

     label7:
        $z1 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label4;

        interfaceinvoke r15.<java.util.Map: void clear()>();

     label8:
        i0 = i0 + 1;

     label9:
        $r16 = <org.eclipse.wb.swt.SWTResourceManager: java.util.Map[] m_decoratedImageMap>;

        $i1 = lengthof $r16;

        if i0 < $i1 goto label3;

        return;
    }

    public static org.eclipse.swt.graphics.Font getFont(java.lang.String, int, int)
    {
        java.lang.String r0;
        int i0, i1;
        org.eclipse.swt.graphics.Font $r1;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = staticinvoke <org.eclipse.wb.swt.SWTResourceManager: org.eclipse.swt.graphics.Font getFont(java.lang.String,int,int,boolean,boolean)>(r0, i0, i1, 0, 0);

        return $r1;
    }

    public static org.eclipse.swt.graphics.Font getFont(java.lang.String, int, int, boolean, boolean)
    {
        java.lang.String r0, r1, $r5, $r28;
        int i0, i1;
        boolean z0, z1;
        java.lang.Object r3, $r15;
        java.lang.StringBuilder $r4, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r25, $r27;
        java.util.Map $r14, $r34;
        org.eclipse.swt.graphics.FontData $r16;
        java.lang.Class $r17, r30;
        java.lang.reflect.Field $r18, $r20, $r22;
        java.lang.Byte $r21, $r23;
        java.lang.Throwable $r24;
        java.io.PrintStream $r26;
        org.eclipse.swt.graphics.Font r29, $r32;
        org.eclipse.swt.widgets.Display $r33;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        $r4 = new java.lang.StringBuilder;

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>($r5);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(124);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(124);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(124);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(124);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z1);

        r1 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14 = <org.eclipse.wb.swt.SWTResourceManager: java.util.Map m_fontMap>;

        $r15 = interfaceinvoke $r14.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r29 = (org.eclipse.swt.graphics.Font) $r15;

        if r29 != null goto label6;

        $r16 = new org.eclipse.swt.graphics.FontData;

        specialinvoke $r16.<org.eclipse.swt.graphics.FontData: void <init>(java.lang.String,int,int)>(r0, i0, i1);

        if z0 != 0 goto label1;

        if z1 == 0 goto label5;

     label1:
        r30 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("org.eclipse.swt.internal.win32.LOGFONT");

        $r17 = class "Lorg/eclipse/swt/graphics/FontData;";

        $r18 = virtualinvoke $r17.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>("data");

        r3 = virtualinvoke $r18.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>($r16);

        if r3 == null goto label5;

        if r30 == null goto label5;

        if z0 == 0 goto label2;

        $r22 = virtualinvoke r30.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>("lfStrikeOut");

        $r23 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(1);

        virtualinvoke $r22.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(r3, $r23);

     label2:
        if z1 == 0 goto label5;

        $r20 = virtualinvoke r30.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>("lfUnderline");

        $r21 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(1);

        virtualinvoke $r20.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(r3, $r21);

     label3:
        goto label5;

     label4:
        $r24 := @caughtexception;

        $r26 = <java.lang.System: java.io.PrintStream err>;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unable to set underline or strikeout (probably on a non-Windows platform). ");

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r24);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r26.<java.io.PrintStream: void println(java.lang.String)>($r28);

     label5:
        $r32 = new org.eclipse.swt.graphics.Font;

        $r33 = staticinvoke <org.eclipse.swt.widgets.Display: org.eclipse.swt.widgets.Display getCurrent()>();

        specialinvoke $r32.<org.eclipse.swt.graphics.Font: void <init>(org.eclipse.swt.graphics.Device,org.eclipse.swt.graphics.FontData)>($r33, $r16);

        r29 = $r32;

        $r34 = <org.eclipse.wb.swt.SWTResourceManager: java.util.Map m_fontMap>;

        interfaceinvoke $r34.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r32);

     label6:
        return r29;

        catch java.lang.Throwable from label1 to label3 with label4;
    }

    public static org.eclipse.swt.graphics.Font getBoldFont(org.eclipse.swt.graphics.Font)
    {
        org.eclipse.swt.graphics.Font r0, $r5, r10;
        org.eclipse.swt.graphics.FontData[] r1;
        org.eclipse.swt.graphics.FontData r2;
        java.util.Map $r3, $r8;
        java.lang.Object $r4;
        org.eclipse.swt.widgets.Display $r6;
        java.lang.String $r7;
        int $i0;

        r0 := @parameter0: org.eclipse.swt.graphics.Font;

        $r3 = <org.eclipse.wb.swt.SWTResourceManager: java.util.Map m_fontToBoldFontMap>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r10 = (org.eclipse.swt.graphics.Font) $r4;

        if r10 != null goto label1;

        r1 = virtualinvoke r0.<org.eclipse.swt.graphics.Font: org.eclipse.swt.graphics.FontData[] getFontData()>();

        r2 = r1[0];

        $r5 = new org.eclipse.swt.graphics.Font;

        $r6 = staticinvoke <org.eclipse.swt.widgets.Display: org.eclipse.swt.widgets.Display getCurrent()>();

        $r7 = virtualinvoke r2.<org.eclipse.swt.graphics.FontData: java.lang.String getName()>();

        $i0 = virtualinvoke r2.<org.eclipse.swt.graphics.FontData: int getHeight()>();

        specialinvoke $r5.<org.eclipse.swt.graphics.Font: void <init>(org.eclipse.swt.graphics.Device,java.lang.String,int,int)>($r6, $r7, $i0, 1);

        r10 = $r5;

        $r8 = <org.eclipse.wb.swt.SWTResourceManager: java.util.Map m_fontToBoldFontMap>;

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r5);

     label1:
        return r10;
    }

    public static void disposeFonts()
    {
        java.util.Map $r0, $r3, $r4, $r7;
        java.util.Collection $r1, $r5;
        boolean $z0, $z1;
        java.lang.Object $r2, $r6;
        java.util.Iterator r8, r10;
        org.eclipse.swt.graphics.Font r9, r11;

        $r0 = <org.eclipse.wb.swt.SWTResourceManager: java.util.Map m_fontMap>;

        $r1 = interfaceinvoke $r0.<java.util.Map: java.util.Collection values()>();

        r8 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r2 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        r9 = (org.eclipse.swt.graphics.Font) $r2;

        virtualinvoke r9.<org.eclipse.swt.graphics.Font: void dispose()>();

     label2:
        $z0 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r3 = <org.eclipse.wb.swt.SWTResourceManager: java.util.Map m_fontMap>;

        interfaceinvoke $r3.<java.util.Map: void clear()>();

        $r4 = <org.eclipse.wb.swt.SWTResourceManager: java.util.Map m_fontToBoldFontMap>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Collection values()>();

        r10 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();

        goto label4;

     label3:
        $r6 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>();

        r11 = (org.eclipse.swt.graphics.Font) $r6;

        virtualinvoke r11.<org.eclipse.swt.graphics.Font: void dispose()>();

     label4:
        $z1 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label3;

        $r7 = <org.eclipse.wb.swt.SWTResourceManager: java.util.Map m_fontToBoldFontMap>;

        interfaceinvoke $r7.<java.util.Map: void clear()>();

        return;
    }

    public static org.eclipse.swt.graphics.Cursor getCursor(int)
    {
        int i0;
        java.lang.Integer r0;
        java.util.Map $r1, $r5;
        java.lang.Object $r2;
        org.eclipse.swt.graphics.Cursor $r3, r7;
        org.eclipse.swt.widgets.Display $r4;

        i0 := @parameter0: int;

        r0 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r1 = <org.eclipse.wb.swt.SWTResourceManager: java.util.Map m_idToCursorMap>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r7 = (org.eclipse.swt.graphics.Cursor) $r2;

        if r7 != null goto label1;

        $r3 = new org.eclipse.swt.graphics.Cursor;

        $r4 = staticinvoke <org.eclipse.swt.widgets.Display: org.eclipse.swt.widgets.Display getDefault()>();

        specialinvoke $r3.<org.eclipse.swt.graphics.Cursor: void <init>(org.eclipse.swt.graphics.Device,int)>($r4, i0);

        r7 = $r3;

        $r5 = <org.eclipse.wb.swt.SWTResourceManager: java.util.Map m_idToCursorMap>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r3);

     label1:
        return r7;
    }

    public static void disposeCursors()
    {
        org.eclipse.swt.graphics.Cursor r0;
        java.util.Iterator r1;
        java.util.Map $r2, $r5;
        java.util.Collection $r3;
        boolean $z0;
        java.lang.Object $r4;

        $r2 = <org.eclipse.wb.swt.SWTResourceManager: java.util.Map m_idToCursorMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>();

        r1 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r0 = (org.eclipse.swt.graphics.Cursor) $r4;

        virtualinvoke r0.<org.eclipse.swt.graphics.Cursor: void dispose()>();

     label2:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r5 = <org.eclipse.wb.swt.SWTResourceManager: java.util.Map m_idToCursorMap>;

        interfaceinvoke $r5.<java.util.Map: void clear()>();

        return;
    }

    public static void dispose()
    {
        staticinvoke <org.eclipse.wb.swt.SWTResourceManager: void disposeColors()>();

        staticinvoke <org.eclipse.wb.swt.SWTResourceManager: void disposeImages()>();

        staticinvoke <org.eclipse.wb.swt.SWTResourceManager: void disposeFonts()>();

        staticinvoke <org.eclipse.wb.swt.SWTResourceManager: void disposeCursors()>();

        return;
    }
}
